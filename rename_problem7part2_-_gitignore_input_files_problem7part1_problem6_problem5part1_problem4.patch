Subject: [PATCH] rename
problem7part2 - gitignore input files
problem7part1
problem6
problem5part1
problem4
problem3
problem2
readme
problem 1
first commit
first commit
---
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
new file mode 100644
--- /dev/null	(revision 0894a3c8aeb9c22c754c4e578d77a1f97edd91d3)
+++ b/README.md	(revision 0894a3c8aeb9c22c754c4e578d77a1f97edd91d3)
@@ -0,0 +1,3 @@
+# advent-of-code
+
+hacky and quick solutions to aoc
\ No newline at end of file
Index: src/main/java/com/wdtr/aoc/_2023/Problem1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/wdtr/aoc/_2023/Problem1.java b/src/main/java/com/wdtr/aoc/_2023/Problem1.java
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/java/com/wdtr/aoc/_2023/Problem1.java	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,93 @@
+package com.wdtr.aoc._2023;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Map;
+import java.util.Optional;
+import java.util.stream.Stream;
+
+public class Problem1 {
+
+    public static void main(String[] args) {
+        String filePath = "src/main/resources/aoc-2023/problem1/input.txt";
+        Path path = Path.of(filePath);
+        try (Stream<String> lines = Files.lines(path)) {
+            System.out.printf("Solution part 1: %d%n", lines.mapToInt(Problem1::cleanupCalibrationValuePartOne).sum());
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        try (Stream<String> lines = Files.lines(path)) {
+            System.out.printf("Solution part 2: %d%n", lines.mapToInt(Problem1::cleanupCalibrationValuePartTwo).sum());
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static int cleanupCalibrationValuePartTwo(String line) {
+        Map<String, Character> digitsMap = Map.of(
+                "one", '1',
+                "two", '2',
+                "three", '3',
+                "four", '4',
+                "five", '5',
+                "six", '6',
+                "seven", '7',
+                "eight", '8',
+                "nine", '9'
+                );
+        char[] nums = new char[2];
+        boolean foundFirst = false;
+        String possibleDigitWord = "";
+        for (char c : line.toCharArray()) {
+            possibleDigitWord += c;
+            Optional<Character> optionalC = isDigit(digitsMap, possibleDigitWord);
+            if(optionalC.isPresent()) {
+                setNumber(nums, optionalC.get(), foundFirst);
+                possibleDigitWord = String.valueOf(c);
+                foundFirst = true;
+            }
+            else if(isNum(c)) {
+                setNumber(nums, c, foundFirst);
+                possibleDigitWord = "";
+                foundFirst = true;
+            }
+        }
+        return Integer.parseInt(String.valueOf(nums));
+    }
+
+    private static Optional<Character> isDigit(Map<String, Character> digitsMap, String possibleDigitWord) {
+        for (String digit : digitsMap.keySet()) {
+            if(possibleDigitWord.contains(digit)) {
+                return Optional.of(digitsMap.get(digit));
+            }
+        }
+        return Optional.empty();
+    }
+
+    private static void setNumber(char[] nums, char numToSet, boolean foundFirst) {
+        if (!foundFirst) {
+            nums[0] = numToSet;
+        }
+        nums[1] = numToSet;
+    }
+
+    private static int cleanupCalibrationValuePartOne(String line) {
+        char[] nums = new char[2];
+        boolean foundFirst = false;
+        for (char c : line.toCharArray()) {
+            if (isNum(c)) {
+                if (!foundFirst) {
+                    nums[0] = c;
+                    foundFirst = true;
+                }
+                nums[1] = c;
+            }
+        }
+        return Integer.parseInt(String.valueOf(nums));
+    }
+
+    private static boolean isNum(char c) {
+        return c == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9';
+    }
+}
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/.gitignore	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,32 @@
+g### IntelliJ IDEA ###
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
+/advent-of-code.iml
+/.idea/
+/src/main/resources/aoc-2023/
Index: src/main/java/com/wdtr/aoc/_2023/Problem2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/wdtr/aoc/_2023/Problem2.java b/src/main/java/com/wdtr/aoc/_2023/Problem2.java
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/java/com/wdtr/aoc/_2023/Problem2.java	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,77 @@
+package com.wdtr.aoc._2023;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.sql.SQLOutput;
+import java.util.Map;
+import java.util.stream.Stream;
+
+public class Problem2 {
+
+
+    public static void main(String[] args) {
+        String filePath = "src/main/resources/aoc-2023/problem2/input.txt";
+        Path path = Path.of(filePath);
+        try (Stream<String> lines = Files.lines(path)) {
+            System.out.printf("Solution part 1: " +  lines.mapToInt(Problem2::isValidLine).sum());
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        System.out.println("");
+        try (Stream<String> lines = Files.lines(path)) {
+            System.out.printf("Solution part 2: " +  lines.mapToInt(Problem2::maxColorPerLineMultipliedByEachother).sum());
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static int isValidLine(String line) {
+        Map<String, Integer> maxColorMap = Map.of("red", 12,
+                "green", 13,
+                "blue", 14
+        );
+        String[] split = line.split(":");
+        String game = split[0];
+        String input = split[1];
+        String[] sets = input.split(";");
+        for (String set : sets) {
+            String[] numbersWithColors = set.split(",");
+            for (String numberWithColor : numbersWithColors) {
+                String[] numberWithColorSplit = numberWithColor.trim().split(" ");
+                int number = Integer.parseInt(numberWithColorSplit[0]);
+                String color = numberWithColorSplit[1];
+                if(number > maxColorMap.get(color)) {
+                    return 0;
+                }
+            }
+        }
+        return Integer.parseInt(game.split(" ")[1].replace(":",""));
+    }
+
+    private static int maxColorPerLineMultipliedByEachother(String line) {
+        String[] split = line.split(":");
+        String game = split[0];
+        String input = split[1];
+        String[] sets = input.split(";");
+        int maxRed = 0;
+        int maxGreen = 0;
+        int maxBlue = 0;
+        for (String set : sets) {
+            String[] numbersWithColors = set.split(",");
+            for (String numberWithColor : numbersWithColors) {
+                String[] numberWithColorSplit = numberWithColor.trim().split(" ");
+                int number = Integer.parseInt(numberWithColorSplit[0]);
+                String color = numberWithColorSplit[1];
+                if(color.equals("red")) {
+                    maxRed = Math.max(maxRed, number);
+                } else if (color.equals("green")) {
+                    maxGreen = Math.max(maxGreen, number);
+                } else {
+                    maxBlue = Math.max(maxBlue, number);
+                }
+            }
+        }
+        return maxRed * maxGreen * maxBlue;
+    }
+}
Index: src/main/java/com/wdtr/aoc/_2023/Pair.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/wdtr/aoc/_2023/Pair.java b/src/main/java/com/wdtr/aoc/_2023/Pair.java
new file mode 100644
--- /dev/null	(revision 614afb6be6d657514cc59bf3bdc685ee304aff4f)
+++ b/src/main/java/com/wdtr/aoc/_2023/Pair.java	(revision 614afb6be6d657514cc59bf3bdc685ee304aff4f)
@@ -0,0 +1,5 @@
+package com.wdtr.aoc._2023;
+
+public record Pair<F, S>(F first, S second) {
+
+}
\ No newline at end of file
Index: src/main/java/com/wdtr/aoc/_2023/Problem3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/wdtr/aoc/_2023/Problem3.java b/src/main/java/com/wdtr/aoc/_2023/Problem3.java
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/java/com/wdtr/aoc/_2023/Problem3.java	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,236 @@
+package com.wdtr.aoc._2023;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.*;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Stream;
+
+public class Problem3 {
+
+    public static void main(String[] args) {
+        String filePath = "src/main/resources/aoc-2023/problem3/input.txt";
+        Path path = Path.of(filePath);
+        // cat input.txt | head -n1 | wc -m
+        // cat input.txt | wc -l
+        char[][] engineSchematic = new char[140][140];
+        try (Stream<String> lines = Files.lines(path)) {
+            AtomicInteger lineIdx = new AtomicInteger();
+            lines.forEach(line -> {
+                        char[] charArray = line.toCharArray();
+                        for (int i = 0; i < charArray.length; i++) {
+                            engineSchematic[lineIdx.get()][i] = charArray[i];
+                        }
+                        lineIdx.getAndIncrement();
+                    }
+            );
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        System.out.println("Solution part one: " + calcSumOfPartNumbers(engineSchematic));
+        System.out.println("Solution part two: " + calcGearRatio(engineSchematic));
+    }
+
+    private static int calcSumOfPartNumbers(char[][] engineSchematic) {
+        int sum = 0;
+        for (int i = 0; i < engineSchematic.length; i++) {
+            String currNumSeq = "";
+            boolean isCurrSeqPartNumber = false;
+            for (int j = 0; j < engineSchematic[i].length; j++) {
+                char currChar = engineSchematic[i][j];
+                if (isNum(currChar)) {
+                    currNumSeq += currChar;
+                    // Only 1 num in the seq needs to be adjacent to a symbol for it to be a match in its whole.
+                    // That also means to not bother if we already found one char in the sequence to be adjacent to a symbol.
+                    if (!isCurrSeqPartNumber && isAdjacentToSymbol(i, j, engineSchematic)) {
+                        isCurrSeqPartNumber = true;
+                    }
+                } else {
+                    if (isCurrSeqPartNumber) {
+                        sum += Integer.parseInt(currNumSeq);
+                    }
+                    currNumSeq = "";
+                    isCurrSeqPartNumber = false;
+                }
+            }
+            if (isCurrSeqPartNumber) {
+                sum += Integer.parseInt(currNumSeq);
+            }
+        }
+        return sum;
+    }
+
+    private static boolean isAdjacentToSymbol(int i, int j, char[][] engineSchematic) {
+        boolean jInUpperBound = j + 1 < 140;
+        boolean jInLowerBound = j - 1 > 0;
+        boolean iInUpperBound = i + 1 < 140;
+        boolean iInLowerBound = i - 1 > 0;
+
+        if(jInUpperBound) {
+            char right = engineSchematic[i][j + 1];
+            if(isSymbol(right)) {
+                return true;
+            }
+            if(iInLowerBound) {
+                char diagAboveRight = engineSchematic[i - 1][j + 1];
+                if(isSymbol(diagAboveRight)) {
+                    return true;
+                }
+            }
+            if(iInUpperBound) {
+                char diagUnderRight = engineSchematic[i + 1][j + 1];
+                if(isSymbol(diagUnderRight)) {
+                    return true;
+                }
+            }
+        }
+        if(jInLowerBound) {
+            char left = engineSchematic[i][j - 1];
+            if(isSymbol(left)) {
+                return true;
+            }
+            if(iInLowerBound) {
+                char diagAboveLeft = engineSchematic[i - 1][j - 1];
+                if(isSymbol(diagAboveLeft)) {
+                    return true;
+                }
+            }
+            if(iInUpperBound) {
+                char diagUnderLeft = engineSchematic[i + 1][j - 1];
+                if(isSymbol(diagUnderLeft)) {
+                    return true;
+                }
+            }
+        }
+
+        if(iInLowerBound) {
+            char above = engineSchematic[i - 1][j];
+            if(isSymbol(above)) {
+                return true;
+            }
+        }
+
+        if(iInUpperBound) {
+            char under = engineSchematic[i + 1][j];
+            if(isSymbol(under)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private static boolean isNum(char c) {
+        return c == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9';
+    }
+
+    private static boolean isSymbol(char c) {
+        return c != '.' && !isNum(c);
+    }
+
+
+    // Part two:
+
+    private static int calcGearRatio(char[][] engineSchematic) {
+        Map<Pair<Integer, Integer>, List<Integer>> gearsWithAdjacentNumSeqsMap = new HashMap<>();
+        for (int i = 0; i < engineSchematic.length; i++) {
+            String currNumSeq = "";
+            Set<Pair<Integer, Integer>> gearAdjacencies = new HashSet<>();
+            for (int j = 0; j < engineSchematic[i].length; j++) {
+                char currChar = engineSchematic[i][j];
+                if (isNum(currChar)) {
+                    currNumSeq += currChar;
+                    gearAdjacencies.addAll(findGearAdjacencies(i, j, engineSchematic));
+                } else {
+                    addAdjacentNumSeqsOfGearToMap(gearsWithAdjacentNumSeqsMap, currNumSeq, gearAdjacencies);
+                    currNumSeq = "";
+                    gearAdjacencies.clear();
+                }
+            }
+            addAdjacentNumSeqsOfGearToMap(gearsWithAdjacentNumSeqsMap, currNumSeq, gearAdjacencies);
+        }
+
+
+        return gearsWithAdjacentNumSeqsMap.values().stream().filter(numseqs -> numseqs.size() == 2)
+                .map(numseq -> numseq.get(0) * numseq.get(1))
+                .mapToInt(Integer::intValue)
+                .sum();
+    }
+
+    public static void addAdjacentNumSeqsOfGearToMap(Map<Pair<Integer, Integer>, List<Integer>> gearsWithAdjacentNumSeqsMap, String numSeq, Set<Pair<Integer, Integer>> gearAdjacencies) {
+        for (Pair<Integer, Integer> gearAdjacency : gearAdjacencies) {
+            if(!gearsWithAdjacentNumSeqsMap.containsKey(gearAdjacency)) {
+                gearsWithAdjacentNumSeqsMap.put(gearAdjacency, new ArrayList<>());
+            }
+            gearsWithAdjacentNumSeqsMap.get(gearAdjacency).add(Integer.parseInt(numSeq));
+        }
+    }
+
+
+    private static boolean isGear(char c) {
+        return c == '*';
+    }
+
+
+    private static Set<Pair<Integer, Integer>> findGearAdjacencies(int i, int j, char[][] engineSchematic) {
+        boolean jInUpperBound = j + 1 < 140;
+        boolean jInLowerBound = j - 1 > 0;
+        boolean iInUpperBound = i + 1 < 140;
+        boolean iInLowerBound = i - 1 > 0;
+
+        Set<Pair<Integer, Integer>> gearAdjs = new HashSet<>();
+        if(jInUpperBound) {
+            char right = engineSchematic[i][j + 1];
+            if(isGear(right)) {
+                gearAdjs.add(new Pair<>(i, j +1));
+            }
+            if(iInLowerBound) {
+                char diagAboveRight = engineSchematic[i - 1][j + 1];
+                if(isGear(diagAboveRight)) {
+                    gearAdjs.add(new Pair<>(i - 1, j +1));
+                }
+            }
+            if(iInUpperBound) {
+                char diagUnderRight = engineSchematic[i + 1][j + 1];
+                if(isGear(diagUnderRight)) {
+                    gearAdjs.add(new Pair<>(i + 1, j +1));
+                }
+            }
+        }
+        if(jInLowerBound) {
+            char left = engineSchematic[i][j - 1];
+            if(isGear(left)) {
+                gearAdjs.add(new Pair<>(i, j - 1));
+            }
+            if(iInLowerBound) {
+                char diagAboveLeft = engineSchematic[i - 1][j - 1];
+                if(isGear(diagAboveLeft)) {
+                    gearAdjs.add(new Pair<>(i - 1, j - 1));
+                }
+            }
+            if(iInUpperBound) {
+                char diagUnderLeft = engineSchematic[i + 1][j - 1];
+                if(isGear(diagUnderLeft)) {
+                    gearAdjs.add(new Pair<>(i + 1, j - 1));
+                }
+            }
+        }
+
+        if(iInLowerBound) {
+            char above = engineSchematic[i - 1][j];
+            if(isGear(above)) {
+                gearAdjs.add(new Pair<>(i - 1, j));
+            }
+        }
+
+        if(iInUpperBound) {
+            char under = engineSchematic[i + 1][j];
+            if(isGear(under)) {
+                gearAdjs.add(new Pair<>(i + 1, j));
+            }
+        }
+        return gearAdjs;
+    }
+
+}
Index: src/main/java/com/wdtr/aoc/_2023/Problem4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/wdtr/aoc/_2023/Problem4.java b/src/main/java/com/wdtr/aoc/_2023/Problem4.java
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/java/com/wdtr/aoc/_2023/Problem4.java	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,84 @@
+package com.wdtr.aoc._2023;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.*;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import static java.util.function.Predicate.not;
+
+public class Problem4 {
+
+    public static void main(String[] args) {
+        String filePath = "src/main/resources/aoc-2023/problem4/input.txt";
+        Path path = Path.of(filePath);
+        // cat input.txt | head -n1 | wc -m
+        // cat input.txt | wc -l
+        List<CardLine> cardLines = new ArrayList<>();
+        try (Stream<String> lines = Files.lines(path)) {
+            cardLines = lines.map(Problem4::parseToCardLine).toList();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        System.out.println("Solution part one: " + cardLines.stream().map(CardLine::calculatePointsPartOne).mapToInt(Integer::intValue).sum());
+        System.out.println("Solution part two: " + calculateCopiesOfScratchCards(cardLines));
+    }
+
+    private static int calculateCopiesOfScratchCards(List<CardLine> cardLines) {
+        Map<Integer, Integer> cardIdxToAmountOfCopiesMap = new HashMap<>();
+        int copies = 0;
+        for (int i = 0; i < cardLines.size(); i++) {
+            int amountOfInstances = cardIdxToAmountOfCopiesMap.getOrDefault(i, 1);
+            CardLine currCardLine = cardLines.get(i);
+            int pointsForCurrCard = currCardLine.calculatePointsPartTwo();
+            for (int j = 1; j <= pointsForCurrCard; j++) {
+                Integer valueInNextCard = cardIdxToAmountOfCopiesMap.getOrDefault(i + j, 1);
+                cardIdxToAmountOfCopiesMap.put(i + j, valueInNextCard + amountOfInstances);
+            }
+            copies += amountOfInstances;
+        }
+        return copies;
+    }
+
+    private static CardLine parseToCardLine(String line) {
+        String[] split = line.split(":")[1].split("\\|");
+        return new CardLine(parseNumbersToSet(split[0]), parseNumbersToSet(split[1]));
+    }
+
+    private static Set<Integer> parseNumbersToSet(String numbers) {
+        String[] split = numbers.split(" ");
+        return Arrays.stream(split).filter(not(s -> s.equals(" ") || s.isEmpty())).map(Integer::parseInt).collect(Collectors.toSet());
+    }
+
+
+    record CardLine(Set<Integer> winningNumbers, Set<Integer> numbersInHand) {
+
+        public int calculatePointsPartOne() {
+            int count = 0;
+            for (Integer number : numbersInHand) {
+                if (winningNumbers.contains(number)) {
+                    count++;
+                }
+            }
+            if (count == 0) {
+                return 0;
+            }
+            return (int) Math.pow(2, count - 1);
+        }
+
+        public int calculatePointsPartTwo() {
+            int count = 0;
+            for (Integer number : numbersInHand) {
+                if (winningNumbers.contains(number)) {
+                    count++;
+                }
+            }
+            return count;
+        }
+    }
+
+
+}
Index: src/main/java/com/wdtr/aoc/_2023/Problem5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/wdtr/aoc/_2023/Problem5.java b/src/main/java/com/wdtr/aoc/_2023/Problem5.java
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/java/com/wdtr/aoc/_2023/Problem5.java	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,148 @@
+package com.wdtr.aoc._2023;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.sql.SQLOutput;
+import java.util.*;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class Problem5 {
+
+    // It'd be easy to just store everything in maps linking to eachother, but as we can see in the input data,
+    // the ranges get rather high, so we will have to optimize a bit.
+    public static void main(String[] args) {
+        String filePath = "src/main/resources/aoc-2023/problem5/input.txt";
+        Path path = Path.of(filePath);
+        SeedTransformer seedTransformer = null;
+        try (Stream<String> lines = Files.lines(path)) {
+            seedTransformer = parseToSeedTransformer(lines.toList());
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        System.out.println("Solution part one: " + seedTransformer.findLowestLocationNumber());
+        System.out.println("running part two...");
+        System.out.println("Solution part two: " + seedTransformer.findLowestLocationNumberSeedsAreRanges());
+        System.out.println("done...");
+
+        //Todo make a shortcut map from seed -> location
+        // run the numbers that are mapped thru the shortcut map, the ones that are unmapped -> just take the min...
+        // flatmapping from seed to location
+    }
+
+    private static SeedTransformer parseToSeedTransformer(List<String> inputLines) {
+        List<Long> seeds = Arrays.stream(inputLines.get(0).split(":")[1].split(" ")).filter(chunk -> !chunk.isBlank()).map(Long::parseLong).collect(Collectors.toList());
+        LinkedHashMap<AlmanacEntries, Set<AlmanacRangeMap>> almanacEntryToRangeMap = new LinkedHashMap<>();
+        almanacEntryToRangeMap.put(AlmanacEntries.SEED_TO_SOIL, new HashSet<>());
+        almanacEntryToRangeMap.put(AlmanacEntries.SOIL_TO_FERTILIZER, new HashSet<>());
+        almanacEntryToRangeMap.put(AlmanacEntries.FERTILIZER_TO_WATER, new HashSet<>());
+        almanacEntryToRangeMap.put(AlmanacEntries.WATER_TO_LIGHT, new HashSet<>());
+        almanacEntryToRangeMap.put(AlmanacEntries.LIGHT_TO_TEMPERATURE, new HashSet<>());
+        almanacEntryToRangeMap.put(AlmanacEntries.TEMPERATURE_TO_HUMIDITY, new HashSet<>());
+        almanacEntryToRangeMap.put(AlmanacEntries.HUMIDITY_TO_LOCATION, new HashSet<>());
+
+        AlmanacEntries currentAlmanacEntryEntries = null;
+        for (String line : inputLines.subList(1, inputLines.size())) {
+            if(line.isBlank()) {
+                continue;
+            }
+            if(line.matches("[0-9].*")) {
+                almanacEntryToRangeMap.get(currentAlmanacEntryEntries).add(parseToRangeMap(line));
+                continue;
+            }
+            // not a number nor blank, switch to new almanac entry.
+            Optional<AlmanacEntries> almanacEntry = AlmanacEntries.findAlmanacEntry(line);
+            currentAlmanacEntryEntries = almanacEntry.get();
+        }
+        return new SeedTransformer(seeds, almanacEntryToRangeMap);
+    }
+
+    public record SeedTransformer(List<Long> seeds, LinkedHashMap<AlmanacEntries, Set<AlmanacRangeMap>> almanacEntryToRangeMap) {
+
+        public Long findLowestLocationNumber() {
+            long min = Long.MAX_VALUE;
+            for (Long seed : seeds) {
+                long currentSourceNumber = seed;
+                for (Set<AlmanacRangeMap> almanacRangeMapForAlmanacEntry : almanacEntryToRangeMap.values()) {
+                    for (AlmanacRangeMap almanacRangeMap : almanacRangeMapForAlmanacEntry) {
+                        if (almanacRangeMap.isMapped(currentSourceNumber)) {
+                            currentSourceNumber = almanacRangeMap.findDestinationNumber(currentSourceNumber);
+                            break; // Match found, no need to test other rangemaps in this almanac entry
+                        }
+                    }
+                    // if no mapping found source is presumed to be same as destination, explanation:
+                    // Any source numbers that aren't mapped correspond to the same destination number. So, seed number 10 corresponds to soil number 10.
+                }
+                // at the end sourcenumber has become the location, compare it with min:
+                min = Math.min(min, currentSourceNumber);
+            }
+            return min;
+        }
+
+        public Long findLowestLocationNumberSeedsAreRanges() {
+            long min = Long.MAX_VALUE;
+            // TODO: yeah this actually requires some thought, imma head out :-)
+            return min;
+        }
+
+
+
+        public List<SeedRangeMap> seedsInterpretedAsRanges() {
+            List<SeedRangeMap> seedRangeMapList = new ArrayList<>();
+            for (int i = 0; i < seeds.size(); i = i + 2) {
+                seedRangeMapList.add(new SeedRangeMap(seeds.get(i), seeds.get(i+1)));
+            }
+            return seedRangeMapList;
+        }
+
+    }
+    public record SeedRangeMap(long start, long range) {
+
+        public long getLowerBound() {
+            return start;
+        }
+
+        public long getUpperBound() {
+            return start + range - 1;
+        }
+    }
+
+    private static AlmanacRangeMap parseToRangeMap(String line) {
+        List<Long> numbers = Arrays.stream(line.split(" ")).filter(chunk -> !chunk.isBlank()).map(Long::parseLong).toList();
+        return new AlmanacRangeMap(numbers.get(1), numbers.get(0), numbers.get(2));
+    }
+    public enum AlmanacEntries {
+        SEED_TO_SOIL("seed-to-soil"),
+        SOIL_TO_FERTILIZER("soil-to-fertilizer"),
+        FERTILIZER_TO_WATER("fertilizer-to-water"),
+        WATER_TO_LIGHT("water-to-light"),
+        LIGHT_TO_TEMPERATURE("light-to-temperatur"),
+        TEMPERATURE_TO_HUMIDITY("temperature-to-humidity"),
+        HUMIDITY_TO_LOCATION("humidity-to-location");
+
+        private String inputLabel;
+        AlmanacEntries(String inputLabel) {
+            this.inputLabel = inputLabel;
+        }
+
+        public static Optional<AlmanacEntries> findAlmanacEntry(String inputLine) {
+            return Arrays.stream(AlmanacEntries.values()).filter(a -> inputLine.contains(a.inputLabel)).findFirst();
+        }
+    }
+    public record AlmanacRangeMap(Long sourceNumberStart, Long destinationNumberStart, Long range) {
+
+
+        public boolean isMapped(Long sourceNumber) {
+            return sourceNumber >= sourceNumberStart && sourceNumber <= sourceNumberStart + range - 1;
+        }
+
+        public Long findDestinationNumber(Long sourceNumber) {
+            Long offsetFromStart = sourceNumber - sourceNumberStart;
+            return destinationNumberStart + offsetFromStart;
+        }
+    }
+
+    //TODO: what about a seed-to-location map?
+}
Index: src/main/java/com/wdtr/aoc/_2023/Problem6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/wdtr/aoc/_2023/Problem6.java b/src/main/java/com/wdtr/aoc/_2023/Problem6.java
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/java/com/wdtr/aoc/_2023/Problem6.java	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,60 @@
+package com.wdtr.aoc._2023;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.*;
+import java.util.stream.Stream;
+
+public class Problem6 {
+
+    public static void main(String[] args) {
+        String filePath = "src/main/resources/aoc-2023/problem6/input.txt";
+        Path path = Path.of(filePath);
+        List<Race> racesPartOne = null;
+        Race racePartTwo = null;
+        try (Stream<String> lines = Files.lines(path)) {
+            List<String> list = lines.toList();
+            racesPartOne = parseRacesPartOne(list);
+            racePartTwo = parseRacePartTwo(list);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        System.out.println("Solution part one: " + racesPartOne.stream().map(Race::getNumbersOfWayToBeatRecord).reduce(1L, (a, b) -> a * b));
+        System.out.println("Solution part two: " + racePartTwo.getNumbersOfWayToBeatRecord());
+
+
+
+    }
+
+    private static Race parseRacePartTwo(List<String> lines) {
+        long time = Long.parseLong(lines.get(0).split(":")[1].replace(" ", ""));
+        long distance = Long.parseLong(lines.get(1).split(":")[1].replace(" ", ""));
+        return new Race(time, distance);
+    }
+
+    private static List<Race> parseRacesPartOne(List<String> lines) {
+        List<Race> races = new ArrayList<>();
+        List<Long> times = Arrays.stream(lines.get(0).split(":")[1].split(" ")).filter(c -> !c.isBlank()).map(Long::parseLong).toList();
+        List<Long> distances = Arrays.stream(lines.get(1).split(":")[1].split(" ")).filter(c -> !c.isBlank()).map(Long::parseLong).toList();
+        for (int i = 0; i < times.size(); i++) {
+            races.add(new Race(times.get(i), distances.get(i)));
+        }
+        return races;
+    }
+
+    public record Race(long timeAllowed, long distanceRecord) {
+
+        public long getNumbersOfWayToBeatRecord() {
+            long numWays = 0;
+            for(long i = 1; i < timeAllowed; i++) {
+                long timeLeft = timeAllowed - i;
+                if(timeLeft * i > distanceRecord) {
+                    numWays++;
+                }
+            }
+            return numWays;
+        }
+    }
+}
\ No newline at end of file
Index: src/main/java/com/wdtr/aoc/_2023/Problem7.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/wdtr/aoc/_2023/Problem7.java b/src/main/java/com/wdtr/aoc/_2023/Problem7.java
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/java/com/wdtr/aoc/_2023/Problem7.java	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,194 @@
+package com.wdtr.aoc._2023;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.*;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class Problem7 {
+
+    public static void main(String[] args) {
+        String filePath = "src/main/resources/aoc-2023/problem7/input.txt";
+        Path path = Path.of(filePath);
+        List<HandWithBid> handWithBids = null;
+        try (Stream<String> lines = Files.lines(path)) {
+            List<String> list = lines.toList();
+            handWithBids = parseHandsWithBids(list);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        Comparator<HandWithBid> handWithBidComparator = Comparator.comparing(HandWithBid::hand).reversed();
+        Collections.sort(handWithBids, handWithBidComparator);
+        int bidSum = 0;
+        for (int i = 0; i < handWithBids.size(); i++) {
+            bidSum += (i + 1) * handWithBids.get(i).bid();
+        }
+        System.out.println("Solution part one: " + bidSum);
+
+
+
+    }
+
+    private static List<HandWithBid> parseHandsWithBids(List<String> lines) {
+        return lines.stream().map(l -> new HandWithBid(parseHand(l.split(" ")[0]), Integer.parseInt(l.split(" ")[1]))).collect(Collectors.toList());
+    }
+
+    private static Hand parseHand(String handString) {
+        List<Card> cards = new ArrayList<>();
+        char[] chars = handString.toCharArray();
+        for (int i = 0; i < chars.length; i++) {
+            cards.add(Card.from(chars[i]));
+        }
+        return Hand.from(cards);
+    }
+
+
+    public record HandWithBid(Hand hand, int bid) {
+
+    }
+
+    public record Hand(List<Card> cards, Map<Card, Integer> freqMap) implements Comparable<Hand>{
+
+
+        public static Hand from(List<Card> cards) {
+            return new Hand(cards, calculateFreqMap(cards));
+        }
+
+        private static Map<Card, Integer> calculateFreqMap(List<Card> cards) {
+            Map<Card, Integer> freqMap = new HashMap<>();
+            for (Card card : cards) {
+                freqMap.put(card, freqMap.getOrDefault(card, 0) + 1);
+            }
+            return freqMap;
+        }
+
+        @Override
+        public int compareTo(Hand o) {
+            int comparedHandTypes = this.calculateHandType().compareTo(o.calculateHandType());
+            if(comparedHandTypes == 0) {
+                // Second rule: order by card strength, first to last
+                List<Card> otherCards = o.cards;
+                for (int i = 0; i < cards.size(); i++) {
+                    int comparedCards = cards.get(i).compareTo(otherCards.get(i));
+                    if(comparedCards != 0) {
+                        return comparedCards;
+                    }
+                }
+                return 0;
+            }
+            return comparedHandTypes;
+        }
+
+
+        public HandType calculateHandType() {
+            if(isFiveOfAKind()) {
+                return HandType.FIVE_OF_A_KIND;
+            }
+            if(isFourOfAKind()) {
+                return HandType.FOUR_OF_A_KIND;
+            }
+            if(isFullHouse()) {
+                return HandType.FULL_HOUSE;
+            }
+            if(isThreeOfAKind()) {
+                return HandType.THREE_OF_A_KIND;
+            }
+            if(isTwoPair()) {
+                return HandType.TWO_PAIR;
+            }
+            if(isPair()) {
+                return HandType.ONE_PAIR;
+            }
+            return HandType.HIGH_CARD;
+        }
+        public boolean isFiveOfAKind() {
+            return freqMap.containsValue(5);
+        }
+
+        public boolean isFourOfAKind() {
+            return freqMap.containsValue(4);
+        }
+
+        public boolean isFullHouse() {
+            return isThreeOfAKind() && isPair();
+
+        }
+
+        public boolean isThreeOfAKind() {
+            return freqMap.containsValue(3);
+        }
+
+        public boolean isTwoPair() {
+            int pairCount = 0;
+            for (Integer value : freqMap.values()) {
+                if(value == 2) {
+                    pairCount++;
+                }
+            }
+            return pairCount == 2;
+        }
+
+        public boolean isPair() {
+            return freqMap.containsValue(2);
+        }
+
+
+    }
+
+
+    public enum HandType {
+        FIVE_OF_A_KIND,
+        FOUR_OF_A_KIND,
+        FULL_HOUSE,
+        THREE_OF_A_KIND,
+        TWO_PAIR,
+        ONE_PAIR,
+        HIGH_CARD,
+        ;
+
+
+
+    }
+
+    public enum Card {
+        ACE,
+        KING,
+        QUEEN,
+        JACK,
+        TEN,
+        NINE,
+        EIGHT,
+        SEVEN,
+        SIX,
+        FIVE,
+        FOUR,
+        THREE,
+        TWO,
+        ONE;
+
+        public static Card from(char c) {
+            return switch (c) {
+                case '1' -> ONE;
+                case '2' -> TWO;
+                case '3' -> THREE;
+                case '4' -> FOUR;
+                case '5' -> FIVE;
+                case '6' -> SIX;
+                case '7' -> SEVEN;
+                case '8' -> EIGHT;
+                case '9' -> NINE;
+                case 'T' -> TEN;
+                case 'J' -> JACK;
+                case 'Q' -> QUEEN;
+                case 'K' -> KING;
+                case 'A' -> ACE;
+                default -> throw new IllegalArgumentException("Wrong input");
+            };
+        }
+
+
+    }
+}
\ No newline at end of file
Index: src/main/java/com/wdtr/aoc/_2023/Problem7PartTwo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/wdtr/aoc/_2023/Problem7PartTwo.java b/src/main/java/com/wdtr/aoc/_2023/Problem7PartTwo.java
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/java/com/wdtr/aoc/_2023/Problem7PartTwo.java	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,265 @@
+package com.wdtr.aoc._2023;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.*;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import static com.wdtr.aoc._2023.Problem7PartTwo.Card.*;
+
+public class Problem7PartTwo {
+
+    public static void main(String[] args) {
+        String filePath = "src/main/resources/aoc-2023/problem7/input.txt";
+        Path path = Path.of(filePath);
+        List<HandWithBid> handWithBids = null;
+        try (Stream<String> lines = Files.lines(path)) {
+            List<String> list = lines.toList();
+            handWithBids = parseHandsWithBids(list);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        Comparator<Hand> handComparator = Hand.handTypeComparator().thenComparing(Hand.cardByCardComparisonComparator()).reversed();
+        handWithBids.sort(((o1, o2) -> handComparator.compare(o1.hand, o2.hand)));
+
+        int bidSum = 0;
+        for (int i = 0; i < handWithBids.size(); i++) {
+            HandWithBid handWithBid = handWithBids.get(i);
+            bidSum += (i + 1) * handWithBid.bid();
+        }
+        System.out.println("Solution part two: " + bidSum);
+    }
+
+    private static List<HandWithBid> parseHandsWithBids(List<String> lines) {
+        return lines.stream().map(l -> new HandWithBid(parseHand(l.split(" ")[0]), Integer.parseInt(l.split(" ")[1]))).collect(Collectors.toList());
+    }
+
+    private static Hand parseHand(String handString) {
+        List<Card> cards = new ArrayList<>();
+        char[] chars = handString.toCharArray();
+        for (int i = 0; i < chars.length; i++) {
+            cards.add(Card.from(chars[i]));
+        }
+        return Hand.from(cards);
+    }
+
+
+    public record HandWithBid(Hand hand, int bid) {
+
+    }
+
+    public record Hand(List<Card> cards, Map<Card, Integer> freqMap) {
+
+
+        public static Hand from(List<Card> cards) {
+            return new Hand(cards, calculateFreqMap(cards));
+        }
+
+        private static Map<Card, Integer> calculateFreqMap(List<Card> cards) {
+            Map<Card, Integer> freqMap = new HashMap<>();
+            for (Card card : cards) {
+                freqMap.put(card, freqMap.getOrDefault(card, 0) + 1);
+            }
+            return freqMap;
+        }
+
+        public static Comparator<Hand> handTypeComparator() {
+            return (h1, h2) -> {
+                HandType handTypeH1 = h1.calculateHandType();
+                HandType handTypeH2 = h2.calculateHandType();
+                return handTypeH1.compareTo(handTypeH2);
+            };
+        }
+
+        public static Comparator<Hand> cardByCardComparisonComparator() {
+
+            return (h1, h2) -> {
+                for (int i = 0; i < h1.cards.size(); i++) {
+                    Card card1 = h1.cards.get(i);
+                    Card card2 = h2.cards.get(i);
+                    int comparedCards = card1.compareTo(card2);
+                    if(comparedCards != 0) {
+                        return comparedCards;
+                    }
+                }
+                return 0;
+            };
+        }
+
+        public HandType calculateHandType() {
+            /*
+             The isolated checking logic in the methods isn't foolproof.
+             Technically in the implemented logic a five of a kind is ALSO a pair, but since the method early returns we'll never have to worry about that.
+            */
+            if(isFiveOfAKind()) {
+                return HandType.FIVE_OF_A_KIND;
+            }
+            if(isFourOfAKind()) {
+                return HandType.FOUR_OF_A_KIND;
+            }
+            if(isFullHouse()) {
+                return HandType.FULL_HOUSE;
+            }
+            if(isThreeOfAKind()) {
+                return HandType.THREE_OF_A_KIND;
+            }
+            if(isTwoPair()) {
+                return HandType.TWO_PAIR;
+            }
+            if(isPair()) {
+                return HandType.ONE_PAIR;
+            }
+            return HandType.HIGH_CARD;
+        }
+        public boolean isFiveOfAKind() {
+            boolean fourOfAKindWithoutJoker = valuesWithoutJokers().contains(4);
+            boolean threeOfAKindWithoutJoker = valuesWithoutJokers().contains(3);
+            boolean pairWithoutJoker = valuesWithoutJokers().contains(2);
+
+            if(jokerCount() == 4) {
+                return true;
+            }
+            if(jokerCount() == 3 && pairWithoutJoker) {
+                return true;
+            }
+            if(jokerCount() == 2 && threeOfAKindWithoutJoker) {
+                return true;
+            }
+
+            if(jokerCount() == 1 && fourOfAKindWithoutJoker) {
+                return true;
+            };
+            return freqMap.containsValue(5);
+        }
+
+        public boolean isFourOfAKind() {
+            boolean threeOfAKindWithoutJoker = valuesWithoutJokers().contains(3);
+            boolean pairWithoutJoker = valuesWithoutJokers().contains(2);
+
+            if(jokerCount() == 3) {
+                return true;
+            }
+            if(jokerCount() == 2 && pairWithoutJoker) {
+                return true;
+            }
+
+            if(jokerCount() == 1 && threeOfAKindWithoutJoker) {
+                return true;
+            }
+            return freqMap.containsValue(4);
+        }
+
+        public boolean isFullHouse() {
+            // KKJ55
+            boolean pairWithoutJoker = valuesWithoutJokers().contains(2);
+            boolean threeOfAKindWithoutJoker = valuesWithoutJokers().contains(3);
+            // JJ223
+            if(jokerCount() == 2 && pairWithoutJoker) {
+                return true;
+            }
+            // J2223
+            boolean twoPairWithoutJoker = valuesWithoutJokers().stream().filter(v -> v == 2).count() == 2;
+            if(jokerCount() == 1 && twoPairWithoutJoker) {
+                return true;
+            }
+            return threeOfAKindWithoutJoker && pairWithoutJoker;
+        }
+
+        public boolean isThreeOfAKind() {
+            boolean pairWithoutJoker = valuesWithoutJokers().contains(2);
+            boolean threeOfAKindWithoutJoker = valuesWithoutJokers().contains(3);
+
+            // JJ456
+            if(jokerCount() == 2) {
+                return true;
+            }
+            // J4456
+            if(jokerCount() == 1 && pairWithoutJoker) {
+                return true;
+            }
+            return threeOfAKindWithoutJoker;
+        }
+
+        // if there is a joker, you will either have a pair or a better hand than two pair
+        public boolean isTwoPair() {
+            // 22445
+            return valuesWithoutJokers().stream().filter(v -> v == 2).count() == 2;
+        }
+
+        public boolean isPair() {
+            if(jokerCount() == 1) {
+                return true;
+            }
+            return valuesWithoutJokers().contains(2);
+        }
+
+        public int jokerCount() {
+            return freqMap.getOrDefault(JOKER, 0);
+        }
+
+
+        public Collection<Integer> valuesWithoutJokers() {
+            List<Integer> valuesWithoutJoker = new ArrayList<>();
+            for (Card card : freqMap.keySet()) {
+                if(card.isNotJoker()) {
+                    valuesWithoutJoker.add(freqMap.get(card));
+                }
+            }
+            return valuesWithoutJoker;
+        }
+    }
+
+
+    public enum HandType {
+        FIVE_OF_A_KIND,
+        FOUR_OF_A_KIND,
+        FULL_HOUSE,
+        THREE_OF_A_KIND,
+        TWO_PAIR,
+        ONE_PAIR,
+        HIGH_CARD,
+
+    }
+
+    public enum Card {
+        ACE,
+        KING,
+        QUEEN,
+        TEN,
+        NINE,
+        EIGHT,
+        SEVEN,
+        SIX,
+        FIVE,
+        FOUR,
+        THREE,
+        TWO,
+        JOKER;
+        public static Card from(char c) {
+            return switch (c) {
+                case '2' -> TWO;
+                case '3' -> THREE;
+                case '4' -> FOUR;
+                case '5' -> FIVE;
+                case '6' -> SIX;
+                case '7' -> SEVEN;
+                case '8' -> EIGHT;
+                case '9' -> NINE;
+                case 'T' -> TEN;
+                case 'J' -> JOKER;
+                case 'Q' -> QUEEN;
+                case 'K' -> KING;
+                case 'A' -> ACE;
+                default -> throw new IllegalArgumentException("Wrong input");
+            };
+        }
+
+
+        public boolean isNotJoker() {
+            return !this.equals(JOKER);
+        }
+    }
+}
\ No newline at end of file
Index: src/main/resources/aoc-2023/problem1/input.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/aoc-2023/problem1/input.txt b/src/main/resources/aoc-2023/problem1/input.txt
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/resources/aoc-2023/problem1/input.txt	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,1000 @@
+fivethreeonezblqnsfk1
+two74119onebtqgnine
+jrjh5vsrxbhsfour3
+tn5eightfncnzcdtthree8
+kpmrk5flx
+fkxxqxdfsixgthreepvzjxrkcfk6twofour
+dqbx6six5twoone
+glmsckj2bvmts1spctnjrtqhmbxzq
+7sixthreerzmpbffcx
+zhss9gfxfgmrmzthreefivevpkljfourtwoeight
+6tfzvrbkfour
+sevenfive66five851
+drsgdrrgscqmsggrgq1fsqjhtkkrltt
+3ftptvzhvrm5
+twoeightninemfsztp2gbqkpgqvzt6threekcdcp
+four156
+959157fourfive
+sixthreetwo87one7fourdbczdbjcc
+lshzfive7
+38ninethreethreesevensixeight
+z39hpppnncfivenbkc
+9ninefivevnbrrfrfjfivetwo
+fzgnjsz2nine9
+fnhksixfour1six81
+vkkxbgcqzqflgsvgkkkpfp9five58stsix
+eight26sixsghd
+7zvrjkcrrgbsix
+tgdf38fpcssixeightcjtfour
+tcrqkxkptrtt5fdblcldfoursix
+9qpmknkbtxsfourd
+8948twosix9three8
+vpbjslqkpbxkpfiveeight1mzjmhfzl
+187jccxsbqtcjtwo1
+sixfiveonefour637three
+stjbeightsixdfnsppjrgfdggqzjx6cplvznllsgtwo
+3lrznqgc85seven3
+1eightfourfourmgxhdp51slrszbxmhthree
+two3hj
+zgnoneightseveneightseven5d2fivefourjp
+ldjzhninetwokxlkbbzcngssdqphlrc51
+qvhtfhmltt61lss
+lfmnhxmhschzrtntwotwo7twovkl8two
+vrpplrtqxvssgnvdf8
+dzrnnphfl451
+two7pgbsixlkmseven
+rplqnj5oneseven
+2fourfourchd7
+threesixdpslzdft3hq
+three4bqhlckrlgeight2lbdvcggfqd
+ninefive6zqhgfhfdnk
+2one9five2
+1ftsjdfmnkvlx9seven
+four1zsztlvnhcjtvmrlthree4kpztfzqjtdplfxpqlskh
+6zfrhkckfvxsixtjgtnmcx
+eightfourcppgkrmtn3chqxgscpd1
+6threegxdrv8
+mstpbscvjrc5twozjtdxhckrfsnzsdm
+twolhntgone5
+vtrktlkrqslcdnlslthree5
+mfkrfournine4knmmmghnsixxrmzhcsix
+2hfkbthree
+nine96
+threeqglpgvxgsdfgbctdm1
+1threechctd2tnm
+nfgrzrz494twogbrbcpvnine
+two5fdnksffour
+19threeninefive7xzmtzmkpjmnine
+six37sixninejqt
+kk28rqmlshb4
+qmhlxonefbgcrclbf4sqtcpmtlzdzhg4b
+leightwoplxmgrcjcxrfqncvjfdvpgckmqfqsfqjthreefour2djnsvctlt
+nseven7dphcjx36twosevenfour
+rdjkdfivetwo5sixfourfjkzbpjx
+fiveeightcdttxrxjxchf6oneddnpdgxlrpqxrgqtcbgdqhzzsxdt
+5blgzg
+ninetdfive7
+eight9qldkxsevenfour
+onegprdninefourgndvp7
+four13znsmhvtmfour
+threeqnvl9zzzfoneeight
+sevenzkbxghrgftsxfndhlrcxlcj64
+kjlmclkqkjl76eightxdlonef4
+7oneninefive4fkonerjpzpq
+248seventwo6six8vbfb
+8khtwojr
+hssqpxptsb2
+3qcf
+93xrm
+twoscjr4jtkzxvlfnkltzxf63
+cltkcrh9jnkvjsfmtlszkvstzp
+3sjtone9cznjhnkzmc8
+qcjmxqfhlsevennine6
+456rrkxxlfrhk4
+hthreefrq7lnng
+427seven
+slq5vtrsninesix5
+5two94bone4
+six73one
+fournine757fdgkbppx3
+93onefive967vmtmbnjm
+bhcktnzlsghvdl9eight
+fournine9threenineeighttwo
+21cngsixsix
+5nhgtsxdninedvqktrqn
+8tbnznrbg21
+6rjsxftdjgf29
+zdfourqtrjqzglq4six
+ninemxhcjfbprlts1six
+jnmzkfivefive2six2ninegfntlslsgp
+fouronetwo7seventwoeight
+sevenfoursixfive2sevenffr2
+8bhpx4seventwo
+ljclbvmlpeight754two14
+eight11oneonefivesixsix1
+26ddmfrzzd6qdnvpqjpvdseven
+vjgjpjtceight36fivesixpdrrlqpmk
+three349mzhnlg
+tmrxzcrdc9eightninephdq
+two11rtlddgh
+9fourtgsixgppd4two
+34onenineeighteight
+4eighthcx92mhrpjfndt92djgtmmnbv
+nine771two9seven2drflmd
+hxvsgpcxgkh4twollmbbbprxd349pb
+twobpbp2eightmjlhrgc
+fhnnf37sixone5mdvhhssvg
+cknbvdmtcninemmhtrhmx2
+one93
+onervc8oneeightsixfour3
+fournine2
+knvjjvskmsixsixlvzt5sevensixmmthree
+2sfour
+29zqnxnqphflltqh
+23eightptpspjtbnninesixfivedhfnmqjd
+29jgghdf8
+meightwodccsxmc4nvq3sevenqdshf
+fourbbnqscg3
+onetwo2fivef54
+nctbrzqsdljjsix5
+5mblhxfqfns9nine
+6gbone8
+6gd9
+eight5nrzhl4sixseventrvtwokg
+r21jjnine
+mhfsgvcck5
+six92cdngxmfive
+pdmmpzgxc1fourzbmbgtthree
+rdhppfnk8
+fiveone4cf96qprdgcrlhvsixhznbbbh
+two4eightsjzrlkhgbrxzs
+nzhqbzfxchvtbs9sixnfmhpc
+785eight
+hxgdntgnmr8
+xsrxnx4tqzqgv62
+six9ssevenkdqrcnjgvn
+dfvcznvxqd6twozs6xsfvtmnvln7
+rhlseven2957vtmpgczngccrmggvtf
+gfbsfpn9s
+jxtwonenine39eightpzmbdff3
+66pmgzhgffp
+9cgjmfbgsrg89
+858tknqxhrgfournine97qrlvf
+7fiveonedzbmblrtqfoneightkc
+7gsfvvvfive72gjfbgk5
+1rsscgplc6two4fvxfgnkghfthreejddxmtsxjzmnhgcc
+537eightthreeonenineeight2
+tzhgg26one
+qxqhmhdhgqktsvkbkfiveonenzcjfgvnlms4
+ninenctkgtseightxkjlmkjpbd837
+5xjdl16cjthtvj
+5threesevenvnthreeqkcd2xkfhprfgdzseven
+pkqlqdvmsmsevenrmhhjtdnneight5
+cfqoneeight1psqjtgng34one
+dnvdnstxrsgktsfk9
+eightjbdcdxpnzm736xh9
+z5
+x5xffv
+3ggnbr
+82dlnzszhpvjftdt
+gkthhvsix7rfbrmnzvmlbsk
+nineeighttwotfjndlrdpmvfbhs2
+9fpxsgdj5785nsxn5seven
+qhs1ninethree
+86pcqdkg8onefive5seven
+mlteightwogeightsmmfvtwo6
+sixonefourpnnrbl9
+xstrnmzzjrsmbdone6xt
+four777hkzrdclsrdfrqkkkh6
+xzfnndt546lvngqlghtggcrqfour
+svqlsxtlfvqqzjq2
+167cffstwo
+7ninefive5three92shmpzx
+eight1threefive8fivetwoeight1
+four7eightone4onelcrb7eight
+vzfrfxzzfzmldsixfour2hfpln
+6one8sixninetwoner
+nsqhnflqjnqvdgvfive21
+9sixeightqjhpdv
+jstwonethreeninepfkkzvbzcknkmbcbsf6
+3five5
+499jvmmrfzkmbppzcm
+vdpvj3nineeight7
+three2fdeight
+rtwo39seventhreett
+two68sixeighttwo9
+9kmmftsfgjm284gmmlsfvjk
+five7gtbpfourthree9xbfttssrsix8
+oneeightmbbklndlztwo9nine18
+nthreesklqbkrxrmxkfpfprbjl3kqrgqtvgxdbcjnn
+six9sevencnn5
+sevenone2
+three794sevenlqcbz
+fourdcfour466twonesz
+2534
+qv5cm4rpcjkd
+fivehmvssv6
+twopltxmsevenfkfour956xvgxbbckqn
+94txltmgz72fkcgcdkbrkbkfpnfck
+seven9seveneight46
+457k
+fhvdpgxpone18c9lnfnp4two
+sixfive458x7
+eightdjnlvvsevenrnsxrbxqptrvhgnggv77
+qrvrnzxjkj5
+seven4two
+twofivelcrfkzck8three9jcdxvnrsevenvkg
+77sixrjqcmrhktb
+ht9krsfghfrk6
+zfqsix77
+gjxzhgxzmdrczfpqlbp1562njqb7
+79three4b79
+twoqgxjkvmfivevknkxjp5nv3
+hjbzznfourfour8fivemkqthree2
+7ninecjtnr2rnpjsxnine
+73mzgdbvrjjpzzxmgbjcdqjx29three
+kskfgnxbjg97twofourhxpfqxqfivethree
+fivermxblcb2one4
+ninefvkfplbsixoneoneeight2vnns
+8q3foursevenlvmtrrqtsix
+2three54
+jf6fivesixmbnhjdt
+2mpkmrfqctzrfour
+six4nineh
+2fqseven1nthreethree
+8nine4rhdfive
+zczjmlslrmjbgrmbpqb3
+sixpstrxqtdtwofour7ninefive5
+kzkftdrqzthvx56oneptlvfzvsfiveseven4
+p71dmsnoneldx
+nine9twofour5sixzbshnn
+6qsbkgsxrs66one7rnkqzkqfvkhtm
+jnzzxbtt1kctmsdplhg4
+pvbnkszjpmeightsixmxjxdprgcsix8zntghmvrl
+brninesevennine3
+threedgbqjxhneightchxnvnptwozzfrqqtmmvhcksmjk49
+sixslxtwo2z7grtgdnffc
+936797pbgtlpkttwokdqlfpbcmv
+six99fsrnbpdthreefivejpdcvgt
+one8sixsix4jqsvsqnjnxqvh
+dsjkbmq1mghlstwo
+42two
+qbqgt2ninemghghninebdppsjcb
+bmfmbzg36nine7mqljk6onenine
+763
+five8ninethreesevenllmjskvbtlngstbmhhqhf
+2klljtwothree3
+one2jgrqmprg197
+1fcjfbxonefive
+171
+five4zxbqc2eightseven6eight6
+sixpkqvvlqkdkhqdseven4rjq27rrjpxl
+79lcsrsix7twolnjjjqffhshfjshkrfeight
+mczbvstsml22vjseven3gvf1
+two6sixonetwovntpsbfgdk7snzxrxdmhtgj
+2ksgklnnine6kdfg
+6seventhreevskblmp
+9mptsnrpdqldltwo
+52cgvgnsk3one9
+sixfive4kstqckhgdd
+vxhtwone7eightninebvlpkcmfourone5four
+4hnhlr83three3threeeight
+1eightfive
+36fbtgvdfnine9
+eight6ljtbkp
+eightsixsix96bvjnxzjjchldtc6
+jbckzxc5five
+vghptkb7onejnrnfftgthree
+mztxz39six
+7rmchptmrglsix21two
+91tmvvktwo
+seven9fqmfkgthree9sevenfive6
+jrcj441
+1nine9
+674foursncnphhnd92
+fsfrcgsonefivelpkz5threesnrzzvxcdn4fl
+8zrlf5pvmzshrjkdgfkpzmgp
+cflcrf8four9
+6fourkjhtlfrlpmjc95
+968fourzqhkzxtxeight8
+onefivethree6qxrpxkt
+four46vvdvrkgv
+five9six
+1nine8
+bvqlzpjrmckxpgdfz7
+rrvv27
+9three8gmsbrrxzh4dxvvstrkzf8nine
+frnqrxzcfivesix747
+5threek7eighteight9
+four4rrsqsm
+twoeightsix5zmdmcxcfdnrnjjsixmfqpvndkctzdv
+8zvbnthreenvplvljj
+srfkl8twofive
+82njdktmcckrjf39
+qqgmhfourthreeeightjjxfour68three
+fourthreenine5
+9nsfkfcdqcbrbdh4ninetwofiveseven4
+7fivetwo
+2lssdgdvhl
+fouroneqmffoursix9eightwokv
+4cjmsixqhddpcsngvxqskkbmseven
+266bfxtxpkxcxthree2ktmtddmfg
+five6ninebgzmgqbsttf3vhn
+pqmgcchhqrpsljbvx1fourmhzszhdmfznine
+jlxlcqfc1bgqjsvxpbn
+eightfxpnxckzqxseven6llfvqqbhdd1ninesix
+threeflgkjrnrmr4xpxfhhl
+6pvszcmrmtbfhlnmgmqxnqvntg96
+cgnp8ffnxlpmblonethreeqcqnx6
+zjvpxg3ccmkxtzhlx
+7vgpflkfdkvktfhxgf8hcgxzz
+4cmhfccrttfive
+12twofour
+jrgoneightnddmmchbmmklk847three
+threefourgbsjmmrznlmgttq3zncprp8
+ntqpbkvr3xkgqgxjh82
+nine9five
+n1eight979
+8fzvjmmnhd2five
+6vxmbqsvzt
+22fftjtpv84sevenn
+twoone7slfhztpc7bfjptdzj
+91fiveddprnkzprseven
+fivetwo8dssgjmpmvsixps5
+pv9eightfourhgklds4pfnxmtpmzrmx
+vfjfd4sevennljkxxrz
+3threesfourfourbftwoksclvtxmvmq
+seven7fsj165
+77sixkqsdpzxv9
+1fourninemqxqc412
+pmdmtthree1sljpn99three
+zvqvhhbrg76bfbldtwoeight
+sixbh5two5two8
+fivefournjdlbggpsbn1threevzqktlbm8
+glzqmznfiveninesixkscdflhqj9rjnjt
+hjgbncf9
+zdnf7
+six6fourjghzroneightf
+6zxvqqxrc
+d6
+1txhlrsnbk97fivelvqjxeightfour
+hthdvd35six7
+ninedrc3one
+eight28nine1vjm3nine
+zrnninesevenvftnjl1pdfgkdhmjjgmpgxkjttwo
+threelhnhfxkeightsix7
+gjqng7two46pzxcsbgnv
+sixcdj9ghqlbsnpbninesevenxdzkqxdfdrlfpgnpg
+nineninethree3twovhjhjgfive8
+ldgzxftnninenine82
+zxvtgsfiveone1sevennine4rfh
+1318khksmlfv9sevenfvhrt2
+vztwoneseven1rb
+457threeninedmffxznlpb8
+five7eightcvgcmqkctclnjsnfourvqptsnpph4
+pftwonexgrzdvq65
+64hfptjtqztlv
+fmxfjg686fivettfgd
+hpbqxfour6two86nmrhgkeight
+3skzmdggpnxsix5four8
+sixfour7smh6gbbphmv8xrrrsns
+5bjvmxml3threephlfnbpfxq
+9zlrdnxvzffghrqhsixfcsrtqvfone
+61hmdmjfv36eightthree9
+78six3crj4nine7
+fourqhtvfbpx9hcvmzmdjrshkhrthree
+threeninehbcgqmxknine8z
+17csdthtzrsqnssxqfivesttdfzxrkhnine3
+9eightpcflcqfhveight3
+hbvkzz9seven
+6seven6
+eight3two16tlnsmxpqbn
+fjqhctnjhk4fourcgxfhffrk98grx1
+sjkpr34
+hvlh2five8fivendxh7three
+onethreed12jvnk1
+fivetwo1rtscxhkqpvtxkmjccbcvl549
+5qvmvft
+nine9cpqzbvhseven9mtjk9seven
+znrpx47two67six5
+xnqk5fourp4tflgmbvhlxsixfive
+3fivesevenrzeightbhfvhrh
+qzmbljhone8fpmkrrrhvdbqvdthree1
+rfzfztn83jrtnn3five
+29one5fiveggrhlvtvtz1
+onennczlkx3twozjdlblqcvhtwo1lrvtx
+mhmrtmjlffjlmhfour45two
+bvjnzxbmfninefour94four
+glrcmgthreesix6eightxgzx3
+six7v4onevptsdghxqblrpblng
+7nine6sevenoneone
+pf8oneoneightjgl
+5dftcf8fourfive8ljdkhjxd3
+nzqnbpssix54ssmsnthreex
+8fourpbxtvcmsvrvkcms2zvvvmkp
+mv9eightone
+2lvthreekbfjj3glbrlpxsqlkdksixseven
+twotsvcqfoursevendfsqk1threeone7
+fivefsphdxqlpds91kkfqone
+eight5two9
+fourfour7tfxr
+2czjhjsrrzc
+ninetsrzqvldgn9fivefive
+fivetwothreevcdvqnv2zhmtmrqvv2
+nine9tqkhxsthree2eight63
+bneightwo8kpkkgbxgnineqjkt4fiveninesevennine
+rvhjzveighthqdgzhfcbnxztf25sixfour
+8four4six
+rjsgxsjqrq1pbzhfxqvphvnd67kvt
+sixnine6
+xnvfgvcs7
+3sevenoneone3
+btmnrqcphpcxnhtwopvlthreeseven9
+991
+3ninepqhq9mtwo
+eightfmfkfvmtwofoursix2
+two48
+bone5phdjdlseven
+ptfxfdkninefive6sgrjhxksft6
+nine9eight
+2pkbv
+lhqeightwoseventhreegtpvhsixdgseven8vlkkl6
+j8nzlqctlbffonegzcvpjksmr1ninetwo5
+f93fmgqllzf5
+mtsdrqzqrkthreesnjxkdjlc5fj
+95onenmqrzbkksevenfour5five
+six8threetkzqrs
+two9twooneone2rdkdtlttj8
+srjlgxreight8fiveoneightt
+7fourxtcj
+threelrqhtjtts9zsix1jvrkkzn8
+6xxqlzkgfspv
+zltbp8
+four3seven6mhqtln342
+9eight7rrseven8zmcqd
+mlgcbjhxjeightqxxxb4seven
+3nfivedgpvxprzvpbftplgtfivefour
+ninenhxjqzhhhl1three99
+fivetptfpone89ponefourjxmdrjkrleightwoh
+3tspjckb
+9four39gvlmp5
+twotwo89
+mboneightgjjrxxxkmmhprxptqtvseven754gjjr
+pdgksxnkqj7fourdtjlnjs3four4
+3qkkbbfkvnninencbvnvztmnfpbsix8one
+seven2jqljbktgzvr
+fourdv5onesix8five8seven
+5sthtkqk5
+tlpds3
+tvzflpzpgsl2hcpsgxxtgqeightfoureightoneone
+8gjflqxf26rfour
+578vsxmdtleightsix
+four2two6
+5onetqhsfourtwosix
+1xj5fvmftprrcqvmcj9
+qzbptdttbqseven6
+8l
+ninejsfdnfl85fpjgcmkqvmfivetwoeight
+kcmrgnljhpfv2jjrfcvdqsixkjhlfnq
+cmlvvonelmkfbt3qfdgz5
+9hnsjjgdd4mvksevenfzplpczbbonetwo8
+zone3
+cthtrxb39393
+4nine54six4txtpcz
+m1bgfeightqjhvlrlfj
+3199
+one6nineeight5vktwo9kgfjhktlgb
+2cpgtrfourtblzrhdlvdq7fourtlpvjkpn
+qpfjcfmgnpnvrsix1shncrlmone5zjvcdrv
+3mc9qgkplqcqjdtwogmsxvcdhxccxtwortdpsjpx
+8znfpbqv53seveneight
+vpptlbbmqnfivekq7
+one27ctq193onesix
+66
+znvvmjktwoblr8
+tdqzhmsv4onefour
+hqxdgtrhmxonetmpjmd3ltwo
+rlppvdsrxpnxh6fivezdbbvgpbpqkxxvnnq2
+37ninegthrzpzkrnine
+lbtcrcmkckfmheight5ztvqpbt4
+six7eight498two
+1msqsmdfdpq6ninepxnjjfnmfivecfxhdrndbd4
+8eight9four2
+cpmeightwo5
+seveneight2three6two
+sevenonetwo2rqhkvnjthjmrdkhrbjsstfour
+fksvone9four
+snqbjfjmcbqpmonestj7bxgj
+mhbxccsseveneight9gdzdkeightpk
+mgks1seventtbnqcdllnine65qkfdrzm
+83xzcd2ncvxdbgdrdklnmps4fxcndtkjsg
+fsqgljbpxninesixfive55six1
+34fqqseven2
+3eight6nffcnjrsixsevenqf
+dplzrgtn8xjnqpnxts1ninesqfhrdxrmn
+szd83hxlnshsevenone3threetwo
+csevenqnpmqhtpeight8twonelp
+dxzfhlrpzzfive63dz4sevenrlqcxhjddv
+xbgf81bxlthreepkjh53
+8fourbbcnn
+3gdthtqzjleight9sfmmzcone
+ckrkgrxd88
+three4zlkvrrmsgc28nineseven9
+nine5hcp9
+821pbsfmp388
+two8eight2four8
+14nine
+four6vxpvfhfggnninesevenseven7twoone
+3onethreemsjjvc7jblmdxrz
+6gvfeightnineplmmbtsqxcxs
+5four36ninemtpqtzpktqfpfive
+zmxrctmxnfchrmsdxj1rbxkblsevenfourlgdppzfblh
+7sixhqlrfqzzbppzzsssixlhtv
+1teighteightdj
+7cldkzgbn
+mjsdlsgtwo2two
+jbnfqjdl8
+fourninesmff5fzsvpxvc
+five3dzgrsrbsmc7pnlz
+bbzch5twosixseven8one4
+2229
+six824881
+onevtsjztc3twoeight1
+72sixsgzpbpdjvtnxfivesixsix
+1fournine
+841five
+qvrrpmdmgqseven1sthree
+mkxbqcrxtsevendsrgvfkrgeightxrvfcgtwopsjnngn8
+8dvjhfhhzbthree5p36
+qqmhvjjnznxr95kkl9
+9sixsevenz87
+threejvpsvdxkgfg5three6bqmg5eight
+f7four8eight5foursix6
+8sstmfkpsjmxmrdkm3fpxxnpqmdhvrbkvgxxzfourseven
+8vtpvlbkgxngcrjrsone8
+jtwonexsgmlztnhtrljtfggkm5
+cbtxjqqdqc56fourjhgtrjsxnbxnineeightwov
+76zts8
+fivehqftq3
+5fiveqpncbfrrnp5sixfive
+sevenseven9
+8nine2fourdxxdghpmvseveneightwop
+five4lzmvkqonefourtfhp
+928
+fourklbbjnr6
+3eightdvpsbkf79klxnkkfour
+67three
+2two67hhsrfbdfournine3
+lxpl2
+sixsixjrkhthreeznvqgseven9kjlhc
+34llhlctkks
+rsgmz7nine3
+3tdxfrvpktwofourfivevxtlllqvggft
+seven2ninegcfrhbjxhlcntxzvp
+321dcmcqmmfvfzvgmjp1mone
+two12qlpxjdjqfc54seven2
+eight5fjmsgjztwo
+twotkdjqqbtt6twoone79sjkf
+19one4
+xvjtmnq15
+sqvtzflq8onetwo3fghrstrd5three
+4seven8rlrggvgtx9crnbseven8
+59cxtwo55596
+dkkdlsmmttwofour8
+9xzvnnnr7jjjsrrxlsvggqplrqfpgl6rgrqgrqhr
+kkbjcptltjsdjrlhzzg4drkffivezkxl
+krsevenrcdq43
+72fiverxszpfkgxtdjnspxmrt176
+one5rjglslglzlhnhqj9
+18bxgghx4
+4fivegtxkxvqlskpv726foursqeightwonq
+eightoneninetpht39two
+four5982xjmvzxbhkqfive
+sevenptlmncl4
+4twonine3
+nfpvhninefthreetwonine88
+onervzkpxbrmnsbg3rkmjsfbltwo
+gv2
+eight5dhsprsgr
+8qlbfive1flxrb8xcsfkdkxskdmk
+gzv65rmkncqcveightfgfvfcmttkgvbxjg
+two2pbxckhdlxfivetdqthree
+84lgmvhxpldeight
+jtjkmlfbmseven65xrnfbkn
+9five2plxh2
+6nineone5rgrkdzhsxj5
+vjdfhvklsp2one9
+sxfvgxgh4drmrhmbqjxhkr8jqnhqrnine
+eightfivetp6mndcjqbdvzsix
+seven7vt1
+five65twotwo8eightjm2
+mvvsix8threecl1clftjvjlgk
+2threefivethree3rqhhdvxqmg8
+qkkpvjfmpjcsmldtnine4nine
+zgrpvl3
+mdjnine1kjfkqqn
+7mptczpscnq4vdfbveightfourjkhnhlkrkgch
+pnineonetwo2
+hkvtvvhrsrsevenfourone7kglfnjzztc
+594eightpp1vseven
+9bbghfmvgcpchvbfivesevenfoursix2
+2three2796
+sevenmzskghzgnxhqcq48htpczbhgvtwo
+61hnccftjftjbnntsjhbfvvdtmlpbnnh3four
+ljg79gdvhxdkmsqmsgnz
+4ninebjgqqz
+bszxzt4gone6n2
+l4ctzkxbz
+5qrhonetflqdnsztwonine9vnctxjnine
+one5xrl2ldcrs
+4eightnineone
+zjlgvvpzpone9
+1eight5three
+vmvpknmkds9onegjxsfppqtwo7prv
+threembbkvhlv28ktfjpd29
+onefivehjvhjjbjj5jmqcmbxskninexkftfk
+2eightjvpxjfzhcj
+59glcksjlr6onefourtvszlbcztlbcjnkqn
+sixxls6seventhreefdrhsfchfrfiveggdbmfqvxk
+sixtwo62eightkcnrkmt
+eightfivedpscseven93
+191dhfpcjbn
+rjhgbzqftwo247vhtnxone4gjrj
+8fourctzsbsnine6sixfive4
+four1dcczj
+fourqnskksgg37sixeightpktnqvlm
+7one26eightsix
+six7sevenjbhfsshdtbvpbpzx
+6jstxqcffive58twonelhf
+2sixhcdkrprbskfpbb29lsxgpf
+2qjlcphonefxx44six
+ninecsssqzhone6nrmlkdhvthreefour
+hrbnfive19
+sevenfrtrbdqfournineeight2
+mbkljfive5snsdsthmcdqrhpklxgx
+43vvtqb5rfivesixkbxdkfgshjk
+kgoneightqqxlrhtpx58threethree7vvqq
+plqv7fivetwornc
+six8bhgnfctwo
+2ninejjtvxrffjfivesixtwo
+mpntlbqvninepfkdgdrmrpxgs441
+brcspjtbttnine16xhjhvzgf8fourrbdljsz
+three1onefive
+five1q59
+2rxtthree3three
+dd126gpdnjjgxmg9
+eightone4cnpqrrdvvsixtfdfnlpmz
+llrfourtwofourvlg78
+ninehjhpnjbzdgxxcthree5
+94vp4ftkxfh1
+6tfrbtvdk5fivefive9zpgvfkfoureightwockn
+bfnxmkjsevenfive8
+9gqrnnmjddmz
+four72snjxrhn
+3three4eight339
+four5fivervnxbscxjdtwolvnine
+eight4xvsszglslfivetwosixsixfivekndrmh
+ninesixeight6eight2seven1four
+661seventwo
+23dtscfgln7
+6sixlcdqqx196
+ftggvxqqlbrpkg629hxgsdnzxsrd7
+3pmsbddckfivefkhxlhp7cmxgnf2
+ghzqnkch7cjrs
+four22
+mpmzbnfour852r4six
+r8one8five
+onesix8threevxgpq17four
+qnqeightwofcdsxgscgclpptnp9four1sixnjlvxqxxsnine
+22ghnftqtmxzgfllzqkjvglrncgtwo
+9twolkqtdzlg2qglgtnls
+one3fivevhp4tpvjxccrnl
+4jghljvxq
+6n
+5sevensevenzsxtrvprbrpmnzjnft8dtczjfgrcjqdtt
+692rchkx
+32gpqjfnsevenrnqcd
+3fivejrgfjthreetwo869
+sjtj4ninesix
+9pqxqhfourthreeltjvpv3
+twozxpthreenine931threethree
+9kdmxssdm6fivesix5
+3chmjhtwo67eightfour9
+sixjt76fiveninedjzpceight3
+6p36onern5
+963seven
+pgzrdxlqcb6ninejmxreight45seven
+sevenmbgqvnnine5eight
+twotwo5
+hzbfour63nttfktqjzjhponeightcz
+tnmbxcgrxbfivefive8cttmdeight
+tklnv52two626htjghrccmzct
+4nine7mninetwo
+cfglfqttjrtnzrrb3jclcngt4
+ftwo6eightgctgjzbrxlftlhvzc
+kjscrvjhbtv7twoneq
+four51onezkhllzssix1five
+sprftsonesevenn3rmfive
+m35five2fn
+dcvvxzbmseven16
+tlrone45
+nrtfqlsxxvvcqtnjxzzonefour6329
+bq64six
+btwone79mkcmhlmfg
+four35one
+seveneightthreennbhgbsix6nine
+8llbpdqqsbb
+sevensvhzkjfxrnvxkp247five
+qftsrhn3vsnbkpptqdsxdz
+fjrp3threetwo7cbjsbrq
+qzbbpk65
+nttgvr42fzkr3sjgsfspnmfive
+zsjnbntmmlqs7cgbdxcmqone9
+threehpjbgphfqj2
+onezjcmlcjmkfive7
+fourthreefive86twosix
+vlgfd31seven
+flbqdkfqmj5htrzfpdjxeightsix
+psh5eighteight8six
+crzpzxt3eightvgfive466fbs
+7cxxnglphqcxxnlbj635
+threetwo6brzqxrbfrbffzllth3
+jhcpvv8xccdmczvthree
+fivehzsdct9ffmknlgtdmfzdfvmxvpj
+68eight14zthree22
+4qfdnl
+seventnfnjtdv5qsrmksixffcrs7nine
+1two5one
+ninefmjlzkninethree3
+hkkltwoone6hhkdkqdvznmnine7
+rns2jmbcvp2
+7tworgz5mxxtbjvg
+twodxzfvhkzbtwo2qght
+1bvl3
+scxhtbssnghvkkhjr6v8
+dxrztssg5jtdsix
+4dhpvzsmxhbsixjrtqxmmcnkhv
+2bxzpmzteightpshgffpn
+onetwo14sevenlvvhls5sscsrpmzhsix
+fourtwomxscgh6four
+7mnzfive
+xhzsgtppxgchc9threenine32fourthree
+9nine4sevenqnhhglgfdccheight
+mssoneight8three79vgpjxgjqseven7spgzdfbltl9
+6zxkgeight
+7mjqteightthreeeightdrnkjzzlm531
+oneoneeighthhgsvj45dvzdvqxqkz
+threedxsmlfqhpcs75eightthreecfbsgbfdxz
+68two
+48tjbzmqrpmjfpv
+eightnine3six4pr6fmtfhxssrd
+3rngpqfourtwonehqk
+eighteightfour8tkgfkjcsixone5
+7one3mcffpztdmzshrs2threecjmlsv
+three1jznfive6dxlcxn
+htzfvd1twoonesdrhpn
+twofive7
+five35ninephsixtwo
+ninethreethreetwoninesevenfive8
+3j4fivekcqj7
+hzf9
+7threefourseven6onenine
+tkzdhq39fourfive34qkhh
+one1mhhrglhvsbbqvj
+ninebthreethree9four5stfspnine
+hkmzxzhvfsevensix9three2seven
+71six35threeqdhxbxrhcx9
+clnzgbxkglf31
+sixmsvpqdonetwo4fourpjrkmnpfdvvrfh
+sixthree4one75
+seven5eightsxnkzfbcnlpfhsixfive
+98st
+one7fivetwogvjpmx
+gpvtdsix5
+five9twotwo94qsxlslxq
+78znzv8vbkqxnxhj3
+3threeqfbxplhqxsr61
+sevenjsvdxcjqjp5
+hbjcnqqtd1twotwofive5two
+vqdf19
+52two47mkrnvrkpfivelvmgzjgcv
+8nineone
+ftqtbqqrqrsnnbnineninetwo6onenmjhvlr
+onensgkpknpqxm3four3576
+sixtndjcvprxzngkfivesixpvtft5
+vtvkrnjvgninesktdqlzpt5
+9kdfqnsmzz
+6fourjbdqj
+fivedmdphcz12ppltqpb82hdjldslp
+ksqkttvninesevensix4pbnjsfznch5dlxfq
+67hpqgstjlzsfive77
+8vxrtgxfbk
+6qksbmnineninekbzcbrmtjthree
+76prtggdthree5seven
+qksgrmmnvone1thmhh3twoeightsix
+two2oneseven
+cc9241nineninesixtwoneggs
+fivesevenhqvrrqrhqlvnslvvqnzrnninebcmsmc3
+nineeightsix42
+vreightfourninefivep1
+onedzn7mhvpnjsdgtzcp
+fbvtnineone5five7
+6oneninesixjgggcfkkltwo944
+gcxkmnnbeightsix4
+6one2eight6gbm33
+threefivetwoxsrt7
+5glzddtwo
+94hmjcsevenfour2frqljgdrdfoureight
+jqsfrllonedqvmm3n4six
+913ninetwomkhvvfntng7seven
+fournine8
+fnmsx4jckrgtwoeightfour5pdhbb
+8eighthrs
+threethree4
+nineqhkxhfslfrhfivep64sevensfg
+three9nineseven7four4twooneightqbs
+143seventlnvcdjt
+clgltnktwohzmvrdcspfjc1twoqs
+2five4
+klt1xqmp5vkrpz
+vdntdrrnz8vtxx
+51sevengrvvqvnrmmsevenkqqnninefourskgxncnl
+3cbcn
+four5fivenine68three1
+seventhree2sixls
+4eight8sdprgt697seven
+ptfdbpr414
+9jrgnxqfourbmcl
+1three8dseven9jfive
+66pdxzvnzrqnkmfthreeqgnkdqvvcbcjbdsnz
+threercbhjnckc8slv5ksrhvtt9fh8
+six35tpf
+pzrghq2four42
+k8ninegqdcbnhb7mskvft25
+2cxvggrthreedpplnjvsqhgfpbfivesixnpcsjn
+ftwonethreefour9fivenine1five7
+sixsixccfbbvxkrcnine71
+9gcglxmjknhtwotwoone2onenineseven
+khvppgl8eight
+bzninebqfhn57
+oneqbltgqlbpqdxgqonem4threefour1
+xchkvlprvfgd59jdbfgvlbeight
+84cjhvqmgdfh1fivesevenf
+2one2
+hxqfsjtwofivehbvndtpsevenseven44hkdstdkzs
+nine4k1five
+78rqrtjzsdfc3nine8twosqzzgsktmkcszzx
+sixsix8
+qkqhcfdckxsix29hfnnineg
+twotgpfcdfcdtwocrffone5xcgtscjbmf
+sevenfivenjvtctlkkmgeight9rxtjlnb8
+ntqfzccxhjfourfmlgkheightmkplt5
+1lpgdxeightqrmkqlxvcnntbvgzthree68
+6four9two
+threej5oneeight
+pmlgczzpthreethree89btlvhfzbjd
+8fiveeight
+tvdkgbgrhplq66fldd
+jsfkf54nvqmbnjmxks
+gtpxlmphhgbgksixtwo9three
+5ktgh
+ggvzvfzmmmvrsqghrbd3kninezrlftwonebms
+4two3z
+fourzdfstskxhggkrl6eightndbxjeight8
+3zdzlreight1827four4
+2qlgkrbmnsgvmpninevjglsevenzdtmrqrnljthree
+four2eightfiveldxtfjltseven6fourbddptkvjl
+brrmvbfqkfczz7hthree
+12fbdbbsrzss6dsrsrkjfhsrjxpxhvkfive
+889srrl6six186
+46tscxgjrxtwo4hlm35tzfxhrzsfd
+fivesevenqgqzpcqnjdjlmg21hgnrdhfrp
+2sixznfour6two
+four4ztsfhvvmdkghh9one4
+bdnmcghlkjmthree1sjhqbmmjtvfcxzleight9
+bbqpd77jhlqbdp3fvnsevenfzxq
+six7sixbd
+8rstj9onetwonem
+6one1
+nineqstcshn35five
+eightxndstksjj9xvmkhxgkqtwo4
+fivek5xhqzvtplmczd35
+zjsjmxmxeightp24fiveeight
+9sjkjsjqxfnsdgxzmhjzfmbbmj
+92qsbrtfour2onefourone
+pkgc7sevenl9seven
+glrkpdfhzddqvbceightpfxdgzm1eight
+39bmsixjbzpkh72lklvgk
+5four7onesevennfglmg
+two6jvdmxqsthreeprfhq5
+moneighthkdcpfhfmx8s9
+twodkcs23fhj5
+fourkcjdhmzvdbrkgj3onefive
+mbmjrqlqzml21
+threexmlgkxxms4rdrlcmlvx77
+3mkjlxlkknfour
+3four9
+65ffd91
+vxnxs8eightpl2three1mgdcrmfive
+lnjkchzljjbznbdtxtgfnsevenone2ztxvtfzlbtwo
+8eightoneightjb
+qxxndbsfxpcmxdfrmzfkdvfvjplq6onetwo
+36gjbxrllone4
+rvljbxpglgpvxgq72
+35ct69hzsgsb
+six6sixzgxsfdkjtwo2drtbnine
+ggdvhnngklthreezfqbzzbninephdhcgzvnine7csbq
+54twofive19five4
+bjeight4four
+52mfcnnrhblfiveoneonelmdzg
+ninebsj2lfx4gfsqrfsglx2eight9
+3859csvhpkkksgpqnx22six
+2onehdhqsndjrgspctkgjlnine7shxpd8hmlvdvsvqf
+four5five6hkchns
+fivetwofourgvthree9zxtrxf
+onettmrcxbgfdpj99sixsix
+onelqdmkfvxg4fourgvcqbtgqs
+onehgrsfivedslxgxd19
+eightxjf12sevenlsmglqrzrtpm4
+vgppbqnskvpfivefivetqxlkbp3two
+pkeightwopkz8rgtqhrhrjdmht3mz5
+bbghbl9eightxcmftpndfive
+oneseven2nxrcseven
+fourthreefour5
+53zsvpqnrjtwo5nine5nrdvmg
+eight78twoone
+bc6nf4zgnmkbnjts
+xeightwopbgt7two
+hqsnjjlbfivetwo84threepnine
+br7oneeight2
+ckxbsdjjttbxczfdpzmrxfh32eight
+5212j912
+1qhtwo3three9eight2nnjpbl
+kdxx5five2ninebrvfzbbxptsccvdjgp
+sixfpslbrfmqfvjs8seven
+45qbcvqcjk6ninesix
+98nine8
+2eightonekcfvzfonethreenpxdpqtnvj
+two87
+jqnzhnzsdgg3eightfournbgsdxbfg31xrnv
+4three3sxvnnzqvhcxj9
+mpjmgpmninekffbkgprkb9tzzdznine8rtq
+xhpfptdmpkeightdkqvpzscx7jndgsxxtqh
+17vvktdvdgpthreeone1gqnb
+fzpbhtmdvseven2one
+sixzkkbjmnxnxm3gcvpsddqqgzktp63h
+nineonexkqkfszg8qdzrlqszpltwo9cseven
+7xfhtdfdldzplmrfivegpkgfseventwo
+xvone5two7
+fiveqdrgeightvrvtmtvvmnl2kbctwofive
+three9rrxhddsdfive577
+mnkltgsgs4fivefivekxzzhjdtnzzvmvxdh
+blqtmklmkxcjtmxsrflffpzjcrninecd7rgdn8
+jgpktmfourdxzll8threerlssqvslnb
+4grvtbmlpqxgmzzksfgzvjggsqhffq1qcd
+cninebtfvxfnmbtznfnzdh4zdmgtvbbnine
+1seven4vkvqcktfourvjtd4zqh
+8eight7lhmx89four
+xrpxkdrf8fhl29fivexzsrdbmksixpvlk
+8tvfplhxxxzr
+twothree8nine2ninegfbrchxmmfive
+9threeskhgsnsvvzpnnv2seven4
+8sbzvncqszzdflznpqfddeight3
+1eightzfivehlmhnqbnnr
+sixfivefjfqftjvcdzkpbkhnvqrqqhpvmgnq75pfk
+mtfvjbbpdeight1
+txtfqxvbrnine2
+sevenptvlbpkdzpp8tnlvkdjjpbt
+qgoneighteighttgrdmljtzbblrtskvfivevbbp1
+ninethreejbxseven392
+86pbrnhhhpn
+sevenonenine5bcqrttts6fourthree
+4seventwo5ngnbkqftzdfive4lhsthree
+36seven97klhbqbpgninerb
+813eight
+ncbfctqlsnfive1brqpthree4
+ksbsddjcknsevensix293three
+rljzzbvd3zkmbpjt9eightninesnlrsone
+97ninesevenrhchvppnztvfbfpkzrbcone
+sevendxbninefour2fourclmln
+1rdtwofjvdllht5eightsixfourbl
\ No newline at end of file
Index: src/main/resources/aoc-2023/problem2/input.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/aoc-2023/problem2/input.txt b/src/main/resources/aoc-2023/problem2/input.txt
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/resources/aoc-2023/problem2/input.txt	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,100 @@
+Game 1: 18 red, 8 green, 7 blue; 15 red, 4 blue, 1 green; 2 green, 17 red, 6 blue; 5 green, 1 blue, 11 red; 18 red, 1 green, 14 blue; 8 blue
+Game 2: 16 blue, 12 green, 3 red; 13 blue, 2 red, 8 green; 15 green, 3 red, 16 blue
+Game 3: 6 green, 15 red; 1 green, 4 red, 7 blue; 9 blue, 7 red, 8 green
+Game 4: 8 red, 2 blue; 11 red, 5 blue, 1 green; 12 red, 1 green, 5 blue; 1 blue; 2 blue, 9 red
+Game 5: 9 blue, 3 red, 12 green; 3 green, 4 red, 17 blue; 15 blue, 2 green, 5 red; 3 blue, 5 green, 6 red; 6 red, 4 blue, 7 green; 3 green, 10 blue
+Game 6: 11 red, 2 blue, 6 green; 2 blue, 9 red, 4 green; 3 blue, 12 red, 8 green; 5 red, 11 green, 4 blue; 2 blue, 9 red, 13 green; 15 red, 3 blue, 7 green
+Game 7: 2 red, 9 green, 12 blue; 14 blue, 1 green, 6 red; 7 blue, 9 green; 9 green, 8 red, 4 blue; 5 red, 3 green, 16 blue; 4 red, 8 green
+Game 8: 11 red, 12 green, 1 blue; 4 red, 7 green; 11 red, 6 green; 17 green; 15 green, 1 red
+Game 9: 1 red, 1 green, 12 blue; 3 green, 12 red, 6 blue; 14 red, 1 blue; 9 blue, 1 red, 3 green
+Game 10: 1 red, 4 blue; 3 blue, 4 green; 3 green, 3 red, 8 blue; 2 blue, 3 red; 3 green, 4 red, 3 blue
+Game 11: 8 blue, 1 red; 8 green, 1 red, 1 blue; 13 green, 9 red, 6 blue
+Game 12: 2 red, 2 blue, 1 green; 3 red, 1 green; 1 blue, 3 green
+Game 13: 12 green, 4 blue; 2 red, 2 blue, 8 green; 6 green, 3 red; 3 red, 5 green; 9 green, 7 blue, 1 red
+Game 14: 1 red, 7 green; 5 green, 12 red, 10 blue; 9 red, 11 blue, 7 green; 7 blue, 3 red, 9 green
+Game 15: 7 green, 1 blue; 1 red, 2 green, 1 blue; 7 green
+Game 16: 1 green, 1 blue; 2 blue, 4 green, 2 red; 2 green, 2 blue
+Game 17: 6 red, 11 green, 7 blue; 1 blue, 13 green, 4 red; 4 green, 6 blue, 7 red
+Game 18: 2 red, 8 blue; 7 red, 11 blue; 1 green, 16 blue, 7 red; 18 blue, 1 green, 14 red
+Game 19: 2 red, 2 blue; 1 green, 6 red; 1 green, 3 red, 2 blue
+Game 20: 6 red, 2 blue, 5 green; 4 red, 1 blue, 9 green; 3 blue, 2 red, 9 green; 8 red, 12 green, 5 blue
+Game 21: 6 red, 7 blue; 3 blue, 16 red, 2 green; 2 blue, 13 red; 3 blue, 11 red, 3 green; 1 green, 18 red, 6 blue; 12 red, 5 blue, 2 green
+Game 22: 9 red, 6 blue, 14 green; 1 blue, 5 green, 13 red; 6 red; 18 red, 4 green; 2 blue, 10 green, 16 red; 1 red, 18 green, 1 blue
+Game 23: 6 green, 4 red, 3 blue; 1 blue, 2 red, 9 green; 5 green, 1 red, 3 blue; 5 blue, 4 red, 4 green
+Game 24: 1 red, 5 green, 2 blue; 4 red, 7 green, 9 blue; 9 blue, 7 green; 7 green, 13 blue; 4 blue, 1 green, 4 red
+Game 25: 13 blue, 10 red, 11 green; 10 green, 1 blue, 3 red; 15 red, 5 green, 8 blue; 19 red, 10 green, 13 blue; 12 blue, 4 green, 16 red; 7 red, 5 green, 9 blue
+Game 26: 20 red, 6 blue, 12 green; 15 blue, 17 red, 9 green; 19 red, 6 green, 3 blue; 8 green, 1 red, 15 blue; 10 green, 8 red, 5 blue; 4 green, 20 red, 18 blue
+Game 27: 2 blue, 3 green, 7 red; 2 blue, 4 red; 5 blue, 5 green; 8 blue, 6 green, 2 red
+Game 28: 1 green, 6 red; 3 red, 3 blue; 1 green, 4 red; 1 red, 2 blue; 2 red
+Game 29: 8 blue, 1 green; 7 blue, 1 red; 6 red, 2 blue; 2 red, 3 green; 3 red, 6 green, 5 blue
+Game 30: 11 blue, 17 green, 10 red; 9 blue, 12 green, 14 red; 16 green, 2 red, 8 blue; 18 green, 1 red, 1 blue; 5 blue, 7 red, 18 green; 9 green, 3 blue, 11 red
+Game 31: 5 blue, 13 green; 2 green, 3 red, 4 blue; 3 red, 15 green, 2 blue; 5 blue, 19 green; 5 blue, 18 green; 3 green, 7 blue, 3 red
+Game 32: 12 red, 2 green, 3 blue; 2 green, 16 red, 1 blue; 13 red, 4 green, 6 blue
+Game 33: 18 green, 8 blue, 3 red; 15 green, 2 blue, 4 red; 14 blue, 3 red, 6 green; 20 green, 13 blue; 1 red, 19 green
+Game 34: 1 green, 7 blue, 2 red; 8 green, 10 blue, 2 red; 3 blue, 1 green, 1 red; 6 green, 13 blue, 1 red; 1 green, 4 blue, 2 red; 1 red, 5 green, 7 blue
+Game 35: 7 blue, 8 red; 2 blue, 3 red; 4 blue, 3 red; 7 red, 4 blue; 1 blue, 1 green, 3 red
+Game 36: 1 red, 8 green; 1 red, 6 green; 3 green, 8 red; 1 blue, 2 red, 1 green
+Game 37: 3 blue, 13 red; 2 blue, 7 red; 5 red, 1 green; 3 red, 3 blue; 1 blue, 12 red, 1 green; 14 red, 3 blue
+Game 38: 7 blue, 18 red, 12 green; 11 red, 6 green, 1 blue; 9 green, 1 red; 9 green, 13 blue, 16 red
+Game 39: 12 red, 3 green, 2 blue; 3 blue, 3 green, 10 red; 2 blue, 5 red; 2 blue, 1 green; 5 blue, 4 green, 7 red; 2 green, 1 red
+Game 40: 1 red, 7 blue, 5 green; 1 red, 4 blue, 8 green; 3 red, 5 blue, 14 green; 10 green, 2 blue, 1 red; 11 blue, 7 green, 1 red; 14 green, 2 blue
+Game 41: 8 green, 5 red, 3 blue; 5 red, 4 blue, 12 green; 10 green, 6 blue; 13 green, 7 blue; 1 red, 2 green, 15 blue
+Game 42: 17 red, 1 blue, 5 green; 9 green, 16 red; 1 blue, 15 green, 2 red; 1 blue, 12 red, 12 green
+Game 43: 12 green, 5 blue; 3 red, 8 blue, 10 green; 8 blue, 2 green, 1 red
+Game 44: 1 green, 7 red, 2 blue; 1 blue, 10 red; 4 green, 3 blue, 19 red; 1 blue, 3 green, 1 red; 1 blue; 4 red, 2 green, 3 blue
+Game 45: 16 red, 12 blue, 1 green; 13 blue, 16 red, 9 green; 7 green, 3 red, 8 blue
+Game 46: 1 red, 17 green, 6 blue; 6 blue, 1 red, 3 green; 12 green, 1 blue; 4 blue, 2 green
+Game 47: 2 green, 12 red, 15 blue; 9 blue, 2 green, 2 red; 3 green, 6 blue, 2 red; 11 blue, 3 green, 5 red; 6 green, 9 red, 17 blue
+Game 48: 5 blue, 6 red; 7 green, 14 red, 4 blue; 2 green, 5 blue, 2 red; 11 blue, 5 red, 5 green
+Game 49: 7 green, 7 blue, 4 red; 11 green, 12 blue, 2 red; 12 blue, 4 red, 9 green; 3 red, 8 blue, 17 green; 16 green, 3 red, 14 blue
+Game 50: 5 green, 4 red, 10 blue; 7 green, 14 red, 5 blue; 12 red, 18 blue, 14 green
+Game 51: 12 green, 3 blue; 10 green, 4 blue, 2 red; 3 green, 5 blue
+Game 52: 12 green, 6 red, 7 blue; 20 green, 6 red, 18 blue; 1 green, 5 blue, 11 red; 2 green, 15 blue, 6 red
+Game 53: 6 red, 2 green, 5 blue; 13 green, 1 blue, 14 red; 7 green, 1 blue; 3 green, 4 blue, 6 red; 10 red, 6 green, 4 blue
+Game 54: 4 blue, 1 red; 1 red, 1 blue, 9 green; 3 red, 2 blue, 4 green; 3 green, 2 red, 5 blue; 9 blue, 2 red, 7 green
+Game 55: 7 blue; 6 blue, 1 red; 4 red, 7 blue; 3 red, 3 blue, 1 green
+Game 56: 2 green, 7 blue; 3 red, 10 blue; 1 green, 2 red; 3 red, 8 blue, 4 green; 1 green, 11 blue, 3 red; 2 green, 8 blue
+Game 57: 3 red, 1 green; 1 green, 1 red, 1 blue; 1 red, 4 green, 15 blue; 9 blue, 2 red, 1 green
+Game 58: 12 blue, 13 red, 5 green; 2 blue, 6 green; 12 red, 15 green, 7 blue; 5 red, 4 green, 14 blue; 15 red, 2 green, 9 blue
+Game 59: 5 green, 5 blue; 4 red, 6 blue, 2 green; 5 blue, 3 green, 6 red; 3 red, 6 green, 4 blue; 3 blue, 7 green, 10 red
+Game 60: 1 red, 1 blue, 3 green; 1 red; 3 green, 6 blue; 6 blue
+Game 61: 7 green, 1 red, 1 blue; 4 red, 3 green, 1 blue; 7 blue, 7 green; 11 blue, 2 green, 5 red; 5 red, 4 green, 5 blue
+Game 62: 17 green, 2 red, 3 blue; 1 red, 3 blue, 2 green; 1 green, 3 blue, 2 red; 1 red, 17 green; 2 red, 15 green, 4 blue; 5 green
+Game 63: 2 green, 4 red, 3 blue; 9 blue, 10 red; 1 green, 13 blue, 2 red; 2 green, 1 blue, 5 red
+Game 64: 6 red, 8 blue; 3 red, 6 blue, 5 green; 13 red, 11 blue, 8 green; 11 red, 3 blue, 1 green
+Game 65: 4 green, 1 blue, 2 red; 3 blue, 3 green, 11 red; 6 green, 3 blue, 3 red; 5 red, 4 blue; 8 red, 5 blue, 2 green
+Game 66: 10 green, 13 red; 1 blue, 2 red, 4 green; 7 red, 7 green; 19 green, 9 red, 1 blue; 16 green, 16 red, 2 blue; 10 red, 11 green
+Game 67: 3 blue, 4 green, 2 red; 6 blue, 19 red; 4 blue, 2 red, 5 green; 4 green, 5 blue, 1 red
+Game 68: 13 blue, 15 red, 7 green; 5 blue, 20 red; 6 green, 12 blue, 8 red; 5 blue, 8 green
+Game 69: 13 red, 13 green; 13 green, 3 red, 1 blue; 8 green; 9 green, 9 red
+Game 70: 8 blue, 11 red, 2 green; 12 red, 2 blue; 13 red, 6 blue, 3 green; 7 blue, 3 green, 5 red; 15 red, 1 blue, 3 green
+Game 71: 7 red, 9 green; 4 blue, 9 green, 7 red; 4 blue, 2 green; 6 blue, 2 red, 9 green
+Game 72: 14 blue, 1 green; 4 red, 1 green, 9 blue; 6 blue, 8 red, 2 green
+Game 73: 17 green; 10 blue, 2 red, 9 green; 1 green, 10 blue, 2 red; 8 blue, 1 red; 5 blue, 16 green
+Game 74: 12 green, 6 red, 5 blue; 2 red, 4 blue, 10 green; 3 green, 4 blue, 2 red; 8 green, 2 red, 5 blue; 5 red, 2 blue, 2 green; 6 green, 1 red, 1 blue
+Game 75: 4 blue, 19 green; 15 blue, 7 green; 18 blue, 5 green, 7 red; 16 green, 15 blue; 7 red, 4 green, 13 blue; 9 green, 13 blue
+Game 76: 1 red, 2 green, 7 blue; 13 blue, 7 green, 1 red; 13 blue, 5 red
+Game 77: 3 red, 10 blue, 6 green; 1 green, 2 red, 10 blue; 7 green, 1 red
+Game 78: 11 green, 2 blue; 6 blue, 8 red, 5 green; 10 red, 6 green, 4 blue; 6 blue, 3 green, 10 red; 5 green, 6 red
+Game 79: 4 red, 6 blue, 1 green; 1 red; 2 green, 3 blue, 4 red; 4 red, 1 green, 2 blue; 2 green, 1 red
+Game 80: 2 red, 1 green; 1 red, 1 green; 7 red, 1 green; 1 blue, 7 red, 3 green
+Game 81: 1 blue, 15 red, 4 green; 2 green, 12 red; 4 green, 13 red; 1 blue, 3 green, 13 red; 12 red, 2 green, 1 blue; 3 green, 8 red, 1 blue
+Game 82: 18 red, 4 green, 1 blue; 14 red, 1 green, 2 blue; 10 red, 2 blue, 7 green; 13 red; 3 red, 7 green, 1 blue; 5 red, 4 green
+Game 83: 4 red, 10 green, 5 blue; 2 red, 12 blue, 13 green; 19 blue, 9 green, 1 red; 2 red, 14 blue, 3 green; 13 green, 8 blue, 5 red
+Game 84: 12 blue, 7 red, 9 green; 1 blue, 1 green, 14 red; 1 green, 8 red, 11 blue; 11 blue, 12 red, 3 green; 11 blue, 8 green, 13 red; 7 green, 7 red, 10 blue
+Game 85: 10 red, 2 blue; 11 green, 9 red, 4 blue; 3 red, 5 blue, 13 green; 5 red, 5 green; 5 red, 2 blue, 4 green; 11 green, 4 blue, 19 red
+Game 86: 1 blue, 6 green, 2 red; 1 red, 1 blue, 8 green; 3 red, 1 blue, 4 green; 1 green, 4 red; 9 green, 2 red; 6 green, 7 red, 1 blue
+Game 87: 8 green, 8 blue, 4 red; 5 red, 2 blue, 10 green; 3 red, 13 green; 1 red, 3 blue, 4 green
+Game 88: 3 blue, 9 green, 3 red; 2 blue, 15 green; 2 red, 9 green
+Game 89: 9 red, 6 green, 15 blue; 10 blue, 7 red, 2 green; 7 green, 16 blue, 4 red
+Game 90: 1 red, 1 blue, 7 green; 7 green, 1 blue, 8 red; 3 red, 1 blue, 1 green
+Game 91: 1 green, 2 red, 6 blue; 4 green, 4 red, 3 blue; 4 red, 11 green, 4 blue; 3 blue, 5 red; 8 green, 2 red, 8 blue
+Game 92: 2 red, 3 blue; 3 blue, 2 green, 2 red; 9 red, 3 green
+Game 93: 2 blue, 5 green; 2 green, 5 blue, 3 red; 2 green, 5 blue, 1 red; 7 blue, 4 red, 9 green
+Game 94: 1 red, 9 blue, 14 green; 6 green; 2 blue, 11 green; 4 blue, 16 green, 1 red
+Game 95: 10 green, 2 blue, 7 red; 4 blue, 4 red, 6 green; 3 red, 2 blue, 3 green
+Game 96: 12 red; 3 green, 10 red; 6 blue, 14 red, 2 green; 7 green, 15 red; 3 green, 3 red, 1 blue; 5 blue, 1 red
+Game 97: 3 red, 1 green, 1 blue; 1 green, 3 red; 4 red, 1 green
+Game 98: 4 red, 5 green, 6 blue; 2 red, 9 green, 6 blue; 2 blue, 11 red, 14 green; 6 green, 4 blue; 11 blue, 11 red, 8 green
+Game 99: 2 green, 20 blue; 12 blue; 3 red, 12 blue; 7 blue; 3 green, 10 blue, 2 red; 3 red, 2 green
+Game 100: 2 blue, 8 green, 12 red; 2 green, 13 red; 2 red, 4 green; 2 green, 7 red; 10 green, 5 red, 1 blue
\ No newline at end of file
Index: src/main/resources/aoc-2023/problem3/input.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/aoc-2023/problem3/input.txt b/src/main/resources/aoc-2023/problem3/input.txt
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/resources/aoc-2023/problem3/input.txt	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,140 @@
+..224.....487...................718.....................378............................................284........310......313..........311.
+....*..............................*744....486*485......*......741......@...359.#666...439................*925....*......$..+........@......
+.235................758..440...........................251....*......262.....*..........*......................752......774.......515.......
+.........705%..@746........+..942*591.347.470...#..257.........637...........793.......299..../.....813....509......464......&.........688..
+.....82................................*.../..901.....*..................836.....&............814...*........*..............80...17*....*...
+.../...*...679.661.....299...........222.............875.....213...161............964...894.........998.....310....258.85...........735.586.
+.650..23..#......*.......................................760*........@./........................202...................*.....339.............
+..............598......#.....536....702*.........705..........793......957............./........*...935...........965.......................
+..................*.357...+.....@.......242.......*......283..*...=956.......118.......959...184...*..............*....401*527.....348...161
+.63=...955.523..77......978.846....849..........699..........790........=911.*.....87...............486.........914..............=..........
+.........*.........842......*.......*..................*127....................844...*....946.......................235...209@...710.735....
+...........@.........*.....144....226....298........560.....253.........431......*...586.......723..../...482.......&...................*...
+...........871../918........................+....................329*......%.....906.............*...350.....@...............365.......361..
+......................536............................+..793..........664.....739................507......289.....256%...73..*...............
+.356..834..............*.........96.939..............28.+....=..............*...........................*................$.553..........526.
+...*...*.............501..746....*..-.......=.................890.....+...701..............807........447......97$..%...........58......$...
+.891....346...699...........*.421......+....666......198*791......340.433............#...%...*.......................316........*.....%.....
+..............%........81.984...........462....................../..........116...711....963...$................380.......745...85....224...
+.........370......923..@.....................563...........188+.........326*...................67.815..............*582.....................
+.........*........-........#530.........489........59...................................................#.....57.........100.*.......441*161
+.637*....961...........118...........21*...........@..216+.........................+....432*.*309..64....992.......81......=.781.644........
+.....324.........126......*166...............&...................385*..............233............*................*..436...........*517....
+.88*.........390*................355..335...372....+254..............294...$589........&..803/.....38..-...........56..$....................
+....235.-.........+196...948....*........-................359.........................398.............608..../.................145..346.....
+........915.................-.485.945.................936*................114.............118...............490.536..............*.%........
+.663........61.......856..........+....343....859...............*345.......*...=862............711.............................313.....606..
+........23...$.....@..................*......................316.....529.362.............49......................307*791....................
+225...............281...#..222.....@..283..............675............*.........911*90..-.....914..%39....509...............................
+.......797*....$........23..../...895.............67.......164.896.....554.....................*............=..............460........181...
+...........211.474...............................@...........*....*201..........911.717.#....192.75..679...........$.........*.........=....
+....355.........................&.....................678.650......................*.....128.....*.....*.........925..230...105.............
+....*.......409#.......*897.....698....427.........+....*.......*...............................313...670..521.......*....&.............*308
+...838..335.................367........-..........325....233...224...950......688.....199.774.........................793.108........501....
+...........*..102..924.349...+..595....................................*................&..............395+.....................753.........
+.........318...*......*........*....676...759.154...................524...........908.........694.211................173...........*214..424
+....458........403...........958.98....*........*..............688......957...488..+...........*.../....................................*...
+.......*.............591...............218.....203.....196$.......+....*........*......................765......971......./....927*741..227.
+......592..%60.$.....*.....885/....287...............................474.........409......226.174.......@........*.....230..................
+...............162.169.................510..962..............17......................32@..*...*.................225....................-....
+.....880...................201.....823*........*...914.724.........89...&.......267=.....717.54.436..........60...............&.........69..
+710........601....306.287.....+.........65...308....&...=.../......*.....926..................................*........278.415......-.......
+..............*..*......&..........241.%...................827../.265.............662.678......@...#......@.....$......-............734.144.
+.............424..434.....701.....*........380*731.............24.................*...&........973..741....728..357.........................
+........304.................*...881................238.....740.........947........587...22...........................271*........603....@...
+...................266.....918....................*..........+.519.617..*...826..........*............./268..974.........486.376....*.295...
+...939.........363.*...............378..........302....586........*....740...=..........380........931...........................12.........
+...*..........-.....387...............*..588..............*..../...............315...................-...712..491.........956.....#.........
+.180.454...................104..661...91...*.............811....370......471...-....419....804..........*...................*...............
+.....*.......@../464........%..*............243.....578...................&..........*...........604..250.....784....750....998.............
+.....245....165.................771...................&.......#.691...768....654....261.........................*.......*............566....
+441..................91.....194.......643...932*............379.#....$.......*.................86.............940..263.638...........*......
+...+.............%.../.......#.........*........344...795..................991..........544....*..................*..........767...266......
+.......-..708..727.....191$......*.....698....=...................990................+.....*....308.......@......325.........*.........44...
+...18.397....=.....93.........649.900.........62....-........322.....*.......@......339....619..........404..........540........./....*.....
+..../...............%............................742............*...........196................874.205........96#..............203.224......
+.........704...727.................496.......*........135....769........./.................%....&....*.../..=.........757...................
+........*........*..424..........&........714.5........*...........@....884...............114.......674.144..83..........*302...........%...
+........29....179..*............104..................531....629.455..................473......300....................254..............640...
+..................296.......................................................1........*.......%..............548........*.....103............
+....381...........................365#..713.282.......%744....................../....709...#...=...431...$.*......*.....837.....*9.....*....
+......*.90.....347.179#...................%.......359..........92............304...*.....923.446.......385.699.....749..............193.206.
+....922.+.......*.......-197.....................*.......128........273....@.....758..............439...................650*54.736#.........
+................817..-..........152..594..949..807.......$...224...*.....124............889.......=...................................625...
+....139....667......239........*...........*.......387........%..806........../...........*..788....632...........=8......584-......*.%.....
+...........*.................280...........11.........*726............181......761..-....66.....%....-................64...........14.......
+............742.736.725..........708.667..........332.......828*750......-.........425.......................944.....*...................926
+.719...110...........*.....348...=..........121......*........................................*.......961.....*.......971...........+.......
+..../.....*629........830..*............91....&..241..491...930............561................889....*....710.333..............163...311....
+......%...................252.../..................*...........*270.......................165.....208.......*..................../.......694
+...914...126...267.183........952..$645......414.822................................69.......-..........=..112.464..267....359..........*...
+.............7*..........................806.../.....931.....*.....355..............*....928...........854.........-..............*993...101
+439.897...........%...........8......381...*........*....748..987....*............437.......*....954.......................*................
+.......*595....783........49.....110.$...675...8...60.....=........981........&..........730....*.............336.......120.790..........386
+............90..............*212...*..........*.......985.....153........*..12...912*383......665.....754.....-.....................950.....
+......790#.*........896@.........773....777..581..514*....910.....5.....579.............................=.......#.....................*.....
+...&.......496...........347..............*...............*...................../............................790..............334......912..
+692............609....&.......694..........693...213....620......695......871..385.......82..........785.......................*..163.......
+.........#....*......984.........*.................=............*.......................................*.545...-............978.....*......
+......971...477.............465......196*313..........447.......766......49.......126*480.............798......792..359*193...........837...
+................157...........+..................773.=..............752$....................447*565..........................*53............
+.384%..........@.........449............470..749...@.........@792..............138..527.......................339.....299.505...........287.
+......691........700........@......96..........*........721*.....................@....*...942......845........*......-.........713..........
+.....*......260/...*...........................491..452.....336.......................73....+..960..........238...........163$..&...=.@.....
+....689.............831...282....709.960.............=.............204............................#..............59...97..........199..111..
+........................$........../........-....498......................557....&...........972............450.............................
+.............653........476...398.........619...*.....*280..923..............*31..691.........*........=...*.....67......782................
+..............*....%..........*.........+......268...........&........428....................408....740....576....*.......*.........$.......
+....-../...734......317.114.332...795...743.........................-..=..908...........381.......................914...420.*647....528.....
+..284.825...............*......................721/.=929.........324.....*....167.561...*.....815*466.......................................
+..............389..304.480.......851..@....585..............942%......#.496....*....-.53................170....938*..........518............
+........368..*.....@..............*....941..+.......*...............930.........364.......522......................59.........+....$....652.
+...........+.963...................949...........828.784......860............*......420.....*..................*......548...........310.*...
+.....476...............*...............=...94.+..................&........589.833....*..426.940.....&.....959.993.&88....................398
+.......*................624....917...838..*...664.......721........................833...$.......672......$............19...................
+....350.......................&....=..............333.................707....................................240..336....=...746.263..$463..
+.........................-.........220.....663...../.............*849..#..631.....712....=.../...308.580.............*..........*...........
+.78@......../..........422....444.............*...............281............*...*....447..37.......*................814....................
+........./...788...810.........&..............369..985....-................92................................684...............74...........
+......279.........*......128/....464........#...../......944........978...............163..984*5.@............+.......165......*....285.....
+..................889.............*.......969........................%.......5......&....$........272....................*......374.........
+.........&..............@948..*..13.358........796.............632............*....789........91*..............*66........152...............
+........508...+..............3...........544.....$.517.....703....*774.......434............/....794........932.............................
+...$...........241.....74...........974..*...954............*.......................375..772...........218.........414...........*366....252
+.501..566...............*..........*....599.....#........256.....468@..942.101.........*..........156...*.............*.......998...........
+...../.............263.312....+..767..............#.........................*...&95..838.162=.....+....130.........583..544.......176.......
+............................936......826.......421.......-139.......982...893.......................*..................*........./..........
+.284.....=724...................661.$....694........85..........438.............51...............616.698.*36.....262......357+........224...
+....@..........491........+........................@......193......*596...........%../844...387.................$.....132.........%.........
+.......84..............362.................................*..98..........&................*....14....394..........$..............56........
+.........*432.....512................704......424.............*............74........196%..875...*.....*............132.......229...........
+..............723*.........568........*..108........672......55.172...217.........................289.427........................*..........
+.........#795.........214....*.336...94....*....988................%..&.............*86......*...............838&.......540.......902.......
+.922...........288........719.....*........845...&..558......#...................524......195.704.....................................77....
+...*....842....../...166........883...-................*503..451..305../....600............................900..280.....*169...586..........
+751....*.........../.*......944......116....416.........................877....*....418...194........644..*....=.....244..........#.....354.
+.......118......208...................................788...................826........$....$...207.....@..152...........893*608.......&....
+..948.......................203../....206.............*....341./977.916.........49...#........@....-............+385........................
+...*......266.................*...607...@.990......964..............-..........*.....340...697........62..............526.....-.............
+..675.....*..........612....604.............*..............492.884...........212...............*157....*...679.........*....706...716%.518..
+......103.749..989...*...................739..............$......=..=..................212..684.....35.......*.........785..............+...
+..343*......../.......680.....................*423.................476....&....420..............241..*......532.....+.......864$.....&......
+..................826........403..311...60.451.............+...........562....../.......306.......*..............420..................321...
+...241..............*...........+..=....@......*240.......845....@.........740.................968..389.177*...................640..........
+......*82...........963...211%...............38...............901.....404.........&..253..............-.....37.........218.501...*....320...
+....*...........................#215...264......298........................*970..801....*....569...............3.......*......%..859.*......
+.136.818...212...........91*72........*.........-...750.....775*728.29.270...............984.&...371..........*.........639..........670....
+...........*.../959................438.....524......*...943.........*................755...................162.................446#.........
+..........290.............751................*.....557..*...483.............421.........*............189.%................/.................
+....................9.786..-......835.......978........445.%..........350........860..662.......#...*....354........*.....682...............
+.117..57+....441...*....+............................................../............*.........88....142..........%.927......................
+...*...........*..402....................874.....734.926$../...............*633......219.84/............662...205...................334.....
+...981........367........338...332/.........=......*......119....375#.334.......146..............%.....$................384.............-511
+........165................=....................666.....................#..614.....-..%744..617.887.......848*..............................
+...........*.203.593...158....*..........152..............+817.....866.......&...............*......../.......904........701.165.80.........
+404..977.93..*....*....*...396.281......*....953....*................*.........116..97.70=..179....107..338................$...*....622.....
+......=.....445........................382.....*...672................859......*...%....................&..........-.571......717....*......
+..................240............175..........808..............225..........988............/604..............232.448..*..651......769.......
+.........569*....*........975*.....*....968..............585.....*................26.................................394....@.142...........
+......*......498..969.........360.666...%.........................919.......360........-.*.........%...................................484..
+...407................886...................................84......................933...101....58........839..425.........................
\ No newline at end of file
Index: src/main/resources/aoc-2023/problem4/input.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/aoc-2023/problem4/input.txt b/src/main/resources/aoc-2023/problem4/input.txt
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/resources/aoc-2023/problem4/input.txt	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,194 @@
+Card   1: 24 12 26 39 19 98 74 16 82 77 | 80 11 51  1 74 60 77 68 42 35 39 78 21 12 29 19 25 98 65 91 33 17 59 24 31
+Card   2: 33 21 96 64  9 38 65 74 16 91 | 14 51 85  1 64 29 74 18 15 38 13 96 16 88 84 21 95 49  9 27 33 63 65 91 90
+Card   3: 31 97 18 93 71 54 24 12 19 87 | 59 96 72 94  4 51 74 84 47 10 57 89 65 37 39 16 31 91 26 85 44 30 24 40  2
+Card   4: 77 20 66 48 23 32 76  9 75 89 | 31 57 89 51  8 34  9 59 39 73  4 32 18 77 94 76 29 23 41 27 66 20 40 48 75
+Card   5: 25 40 65 27 41  7  1 80 26 47 |  7 25 40  1 16 67 42 34 82 19 58  9 91  6 47 80 36 46 77 27 72 41 26 33 81
+Card   6: 92 39 18 64  7 71 48 29  3 38 | 55 29 73 31 15 75 13 71 94 48 78 23 54  7 10 86 34 82 91 85 67 14 57 64  3
+Card   7: 67 43 34 90 14 32 38 49 11 75 | 15 11 38 30 32 29 59 73 72 42  1  4 55 71 57 64 19 90 24 78 31 67 49 98 43
+Card   8: 70 64 82  4 16  6 19 13  9 29 | 21 93 37 69 24 62 60  3 90 83  8 66 20 34 55 22  6 84 99 50 33 26 65 98 86
+Card   9: 31 80 67 81 28 90 23  4 48 86 | 90 80 32  8 15 13 81 63 46 45 50 47 17 96 48 28 57 98 88 86  1 34  4 87  5
+Card  10: 40 46 22 70 59 97 32 20  4 65 | 22 25 59 88 30 82 39 91  4 72  9 42 86 65 96 93  5 84 67 40 57 20 36  8 80
+Card  11: 53 10  4 91 42 12 32 86 38 60 |  3 60 20 65 85 94 58 38 10 76 44 81 51  6 99 19 31 43 84 95 59 36 86 82 11
+Card  12: 73 87 16 92 67 13 28 82 97 86 | 60 45 83  4 90 43 54 55 93 62  7 94 65 72 32 25 23 38 88 61 87 76 35 20 18
+Card  13: 92 13 96 89 25 81 80 72 76 48 | 92 32 31 23 61 74 13 95 71 78 17  1 22 86 62 55 60 41 96 11 77 93 63 99 76
+Card  14:  8 59 91 73 10 61 65 34 29 81 |  9 32 87 78 26 16 90 49 74 61 56 11 57 93 77 62 75 46 36 59 85  3 19 34 28
+Card  15: 87 53 99 88 20 39 28 61 38 68 | 60 16  1  5 10 53 45 56 89 42 80 21  2 37 98 99 74 71 72 59 84 41 87 95 67
+Card  16:  2 19 58 83 91 76  9 63 71 77 | 37  3 59 79 72 53 70  9 43 36 97 98  6 85 90 16 55 11 56  1  8 49 52 15 22
+Card  17: 29 83 12 76 32 82 40 91 84 97 | 21 79  3 31  1 36 85 17 59 30 87 46 27 63 75 56 72 67 11 42 84 62 53 68 38
+Card  18: 39 63 75 71 70 41 49 15 82 78 | 44 74  3 24 35 41 12 47 34 54 91 45 67 57 62 60 95  8 99 19  9 79 80  4 92
+Card  19: 82 33 76 22 93 10 49 46  9 63 | 70 79 80 44 92 15 90 31 75 17 54 81 12 21 71 61 45 60 72 87 91  8 65 83 47
+Card  20: 60 22 86  1 94 25 72 51 73 57 | 28 66 60 25 16  1 54 36 94  7 73 29 57 55 61 22 51 44 39 69 86 23 72  9 71
+Card  21:  6 30 81 11 69 96 45 76  4 78 | 45 96 51 87 65 95 78 82 76 24 32 28 11 50  4 85 74 81 30 33 69  6 34 79 41
+Card  22: 91 88 99  7 98  1 34 81 36 44 | 69 98 15 50 22  7 27 56 52 97 66 88 89  5 31 34 99 11 91 36  1 33 44 81 55
+Card  23: 94 78 99 13 27 56 81  1 62 84 | 84 33 13 70 81 99 63 56 34 72 64 27 93 87 78  1 29  4 62 44 19 94 37 86 18
+Card  24:  8 81 12 30 78 84 33 39 74 20 | 39 51  4 93 62 74 67 75  8 12 28 33 30 99 84 97 95  5 14  1 20 78 81 61 60
+Card  25: 79 74 91 69  3 96 42 98 87 82 | 53 92 74 17 25 81 96 61 56 15 59 27 82 97  2 71 68 95 83 13 10 47 41 75 87
+Card  26: 20 87 17 34 69 97 36 77 96 66 | 66 10 11 96 83 17 13 57  6 73 88 72  2 39 89 48 79 33 22 19 56 14  9 85 26
+Card  27: 18 10 33 21 67 25  7 86 12 72 | 91 53  6 30 85 90 61 20 40 31 23 83 78 72 68 81 63 58 97 42 16 50 79 37 66
+Card  28: 96 36 98 66 37  8 78 41 55  7 | 77 70 42 37 74  8 96 76 63 64 93 98 78 30 66  1  9 55  7 41 90 29  4 36 22
+Card  29: 51 44 97 56 70 67 82 47 61 60 | 90 94 15 67 75  4 52 21 87 33 77 97 76 20 13 35 45 39 78 82 48 70 89 44 19
+Card  30: 57 24 50 79 36 12 45 68 41 14 | 66 90 12 44 29 79 91 73 57 69 68 24 36 56 33 14  1 83 41 45  9 40 60 20 50
+Card  31: 61 53 23 10 85 72 62 52 26 57 | 37 50 73  7 77 26 63 23 83 44 29 96 48 91 27 53 34 33 61 72 20 42 10 22 25
+Card  32: 76 41 35 73 45 66 54  3 69 12 |  8  2 42 85 28 93 58 89 76 73 84 17  3 56 12 52 68 62 66 54 69 45 41 82 35
+Card  33: 32 29 97 52 45 95 92 18 42 47 | 65 97 46 95 96 39 37 16 52 69 45 92 50 17 29 18  1 47 42 77 56 81 71  7 32
+Card  34: 26 96 10 87 15 16 84 99 75  4 | 29 53 75 48 91  8 89 30  5 22 21 87 13 36 49 16 25 94  2 41 18 69 70 68 67
+Card  35: 57 89  3 81  5 35 32 29 91 65 | 50 68 11 61 39 91 36 31  5 89 12  9 60 13 78 75  4 51 21 45 54 14 73  1 62
+Card  36: 80 46 17 70 42  1 63 87 92 98 | 37 18 64 47 46 94 35  2 10 86 91 19  1 80  4 71  5 78 81 52 31 17 92 40 68
+Card  37: 22 15 30  2 82 24 76 84 85  5 | 30 85 22 24 77 12 49 84 93  1 82 17 27 47  4 10  2 86  6 63 31 33 60 55 57
+Card  38: 63 51 26 56 99 22 32 59  7  3 | 73 11 13  5 37 18 84 35 98 42  4 55 15 58 60 78 22 41  3 89 33 74 93 56 46
+Card  39:  5 96 13 31 59 88 87 55 27 11 | 32 46 56 28 43 45 69 27  5 39 91 79 98 63 35 21 29 38 30 82 71 93 49 80 70
+Card  40: 62 47 56 14 20 91 86  5 12 33 | 88 65 66 10 17 30 51 63 15 83  3 55 27 28 64 35  7 99 76 68 39 23 48 74 41
+Card  41: 48 67 38 82 73 65  1 11 78 53 | 50 76 31 66 11 98 80 29 93  6 82 15 86 74 78 28 60 63 12 59 71 24 68 36 56
+Card  42: 91 27 55 36 14 71 45 10 42  5 | 87 44 80 24 43 84 95 99 53 76 33 23 96 20 62 51 72 49 79 78 39 94 74 61 89
+Card  43: 81 61 13 78 28 75 58 67 54 11 | 96 51 53 73 76 24 82 85 42 25 93 57 35 91  9 64 99 11 88 79 39 44 74 65 29
+Card  44: 82 69 37 22 80 81 55 35 27 19 | 12 63 85 74 39 33 95 75 93 73 44 40  2 76 14 94 42  8 17  9  6 84 34 23  4
+Card  45: 20 86 52 74 80 69 53 33 98 41 | 69 51 18 74 98 90 42 97  7 24 41 62 30 58 95 52  5 31 33 53 20 87 38 25 80
+Card  46: 67 72 36  1 54 24 86 61 85 52 | 19 22 86 64 41 88 31 72 17  1 21 85 67 29 82 54 36 61 75 56 70 53 95 52 24
+Card  47: 62 23 80 46 56 10 52 89 50  5 | 37 55 43 79 98 60 30 44 10 97 38 90 88 83 36 35 61 28 76 21 65 87 40 84 91
+Card  48: 11 26 39 71  9 51 86 65 47 13 | 54 23 60 47 26  9 71 13 85 92 39 19 79 14 73 74 45 22 36 15 65 11 63 10 33
+Card  49: 25 62 23 78 98 83 33  7 37 10 | 85 81 71 67 83 98 60 35 10 79 33  7 52 89 62 93 87 23 37 11 25 45 78 95 82
+Card  50: 98 18 87 92 43 45 67 12 46 69 | 38 74 44 31 89  9 62 53 34 43 41 96 11  4 47  8  5 42  3 95 71 28 73 97 33
+Card  51: 72 33 31 38  5 67 25  1  4 79 |  9 77 58 97 48 30 85 91 79 70 49 10 98 76 47 90 89 88 25  5 51 26 99 32  7
+Card  52: 92 18 67 66 45 23 10 83 78 57 | 70 17 97  6  9 95 37  4 69 40 93  2 11 12 61  5 30 42 74  7 87 85 20 52 75
+Card  53:  4 59  6 44 12 60 14 86 93 11 | 14 44 74  7 87  6 82 84 55 48 17 37 18 60 23 59 97 62 31  4 93 12 11 13 58
+Card  54:  2 64 63 60 87 72 33 46 88 92 | 96  5 46 94 92  7 63 93 17 13 25 60 73 55  9 98 20 49 29 57 61 64 48 52 19
+Card  55: 29 93  5 53 72 82 12 67 64 50 | 52 33 77 16 45 31 56 28 18 72 79  4 73 41 59 35  2 38 68 98 87 84 94 66 12
+Card  56: 26 18 58 78 53 22 94 23 76 93 |  4 36 64 38 26 72 21 53 68 91 17 18 24 78 33 16  5  9 79  2 98 52 99 40 76
+Card  57: 85 36 66 93 50 62 90 98  4 31 | 23  6 31 76 79 80 15 38 42 81 85 14 56 88 90 65 50 54 62 78 27 77 35 10 70
+Card  58: 80 61 53 48 94 11 87 89 72 43 |  3 55 54 77 57 95 31  7 12 52 92 59 25 23 80 14 45 85 81 94 30 24 67 53 16
+Card  59: 78 54 15 18 17 28 89 12 88 81 | 55 51 97 22 32 72 88 73 11 28  8 65 14 20  6 79 41 87 29  2 40 74 17 99 52
+Card  60: 64 74 67 76 78 43  6 14 79 96 | 82 23 87 37 51 64 89 15  1 56 86 66 10  9  8 53  2 11 24 88 76 35 54 69 68
+Card  61: 53 29 18 65 93 62 75 20 15 35 |  9 77 14 60 38 36 98 24 47 28  6 95 27 12 10 94 61 71 68 22 72 37 96  4 81
+Card  62: 43 85 70 78 16  8  3 18 26 67 | 63 86 95 90 15 13  4 31 82 74 34 76 96 14 49 94 55 80 39 84 79 68 54 81  1
+Card  63:  9 54 71 62 38 75  3 12 46  8 |  8 12 38 69  9  3 79 16  2  6 54 25 75 71 21 60 29 13 30 50 62 98 46 15 47
+Card  64: 98 90 48 49 86 78 45 60 92 81 | 84 67 21 27 37 76 99  1 74 20 23 73 58 10 60 17 57 26 29 86 11 64 31 54 66
+Card  65: 45 21 33 32 64 38 90 47 15 35 | 64 82 38 89 21 32 90 33 16 63 54 65 39 15 37 42 96  7 40 26 50 45 30 85 22
+Card  66: 95 88 40 57 32 31 89 23 68 17 | 64 94 68  4 55 58  8  6  1 17 88 89 32 95 13 78 93 45 23 40 76 31 96 15 57
+Card  67: 15 60  6 79 89 46 67 26 70 29 | 29 79 36 20  1 14 39  2 89 75 67 33 19 12 70 26  9 58  6 35 60 17 15 10 68
+Card  68: 76 32 99 77 16  6 17 46 91 42 | 81 42 82 80 91 52 70 90 26 15 45 35 22 27 84 67 16 24 32 76 54 77 75 51 31
+Card  69: 34 68 42 21  5 91 47 95 59 63 | 35 59  4 20 47 37 24 95 79 91 49 73 68  6  5 46 63 99 58 21 88 67 94 44 80
+Card  70: 69 11 94 64 21 65 31 89 55 28 |  5 64 99 53 34  4 51 88 10 68 74 81  1 23 29 58 93 94 43 32 70 76  7 77 21
+Card  71: 29 52 43 97 41 83 86 99 49 45 | 86 29 43 89 42 53 82 17 94 62 52 99 15 27 40 49 78 74 77 28  9 10 88 97 68
+Card  72: 48 11 62 26  1 89 61  3 23  6 | 11 54 93 60 43  3 24 77 48 61 32  5 79 91 21 73 62 96 87  6 89 59 26  1 15
+Card  73: 65 45 90 13 71 50 48 97 54 77 | 97 16 45 87 68 32 12 15 21  7 33 64 37 88 67 10 60 26 49 65 20 11 29 44 52
+Card  74: 83 54 74 80  4 60  8 68 35 18 | 71 81 31 11  5 60 77 90 76 58 64 32 82 21 97  2 53  9 10 85 75 18 55 86 25
+Card  75: 13 19 42 14 17 74 28 34 56 93 | 76 83 33 82 28 86 93 29 39 88 98 14 49 89 74 62 13 23 43 17 42 56 45 41 35
+Card  76: 51 79 58 45 42 65 29 96 36 13 | 82 99 23 66 29 69 92 95 64 13 40 45 76 86 74 44 81 73 10  4 30 79 68  1 12
+Card  77: 98 12 89 28 29 87 92  4 13 85 | 24 47  4 76  9 95 29 80 87 16 53 85  7 42 86 82 59 37 28 35 55 40 50 10 58
+Card  78: 98 59 89 56 30 15 51 64  4 95 | 74 92 70 91 45 94 95 58 79 88 87 63 40 54 50 77 31 30 41 17 43 82  4 44 13
+Card  79: 37 35 51 39 10 79 32 56 40 42 | 53 28 38 36 76 83  2 42 35 90  6 84 49 27 47 64 75 39 89 52  3 17 40 87 93
+Card  80: 80 42 36 87  9 50 40 96 27 16 |  6 65  3 69 85 63 30 18  8 77 11 94 53 55  5 20 66 33 32 13 49 89 19 83 70
+Card  81: 20 51 80 10 71 43 94 87  7 55 | 44  1 59 33 27 57 28 17 77 46 11 72 73 54 65 37 25 74 60 41 98 84 22 58 79
+Card  82: 13 87 41 55 28 79  7  2 22 37 |  8 20 91 72 53 65 96 54 44 42 90 79 97 31 75 67 21 93 62 81 82  3 11 58 73
+Card  83: 99  2 35 20 25 41 46 88 23 37 |  6 89 28 32 36 93 62 78 61 53 58 16  5 98 67 15  1 24 80 83 31 76 33 82 73
+Card  84: 13  5 98 70 63 92 79 10 53 84 | 32 10 41 63 92 40 85 53 88 57 13  5 70 93 96 54 29 30 44 22 98 84 79 21 78
+Card  85: 20 32 69 15  1 29  2 87 45 10 | 43 15 36  7 32 95 91 90 75 45  6 65 10 62 20  1  2 73 72 51 85 25 29 33 49
+Card  86: 74 56 19  8  4 35 78 43 75 26 | 74 30 77 56 42 14 19  1 28 18 16 99 63 72  8 90 43 15 20  4 78 23 35 75 26
+Card  87: 40 16 56 70 55 65 23 24 78 47 | 59 56 55 29 64 91 42 93 96 54 13 67 14 20 23 76  6 60 63 21 27 61 85 10 15
+Card  88: 50 48 45 15 51 65 97 22 12 39 | 59 93 75 12 30 39  5 85 32 56 29 50 80 82 21 38 96 65 14 53 62 51 15 23 54
+Card  89: 89 77 17 59 37 15 50 63 40 60 | 44 63 77 40 74 15 37 62 43 24 32 81 55 98 86 16 71 75 84 54 76 67 42 90 10
+Card  90: 63 97 57 10 38 19 42 69 73 56 |  3 89 60 13 33 24 70 97 27 56 15 21 19 83 63 42 36 68 57 38 10 73 77 17  5
+Card  91: 13 62 75 45 36 96 69 50 73 74 | 86  7 13 52 60 22 91 14 67 62 85 54 21 32 75  2 55 69 40 42 77 57  9 84 41
+Card  92: 54 97 73 17 67 58 69 27 21  7 | 38 66 59 27 69  7 71 68 83  2 58 44 11 89 10 75 70 63 61 73 94  5 41 45 17
+Card  93: 52 51 28 93 45 31 90 25 53 60 | 31 65 24 87 74 54 66 69 30  7 50 52  9 93 16 51 53 95 18 22  8 90 99 97 43
+Card  94: 73 17 53 21 91  3 85 89 36 92 | 53 57  5 44 55 90 74 20 51 77 41 81 75 31 63 23 76 18 48 82 45 40  9 37 54
+Card  95:  5 88 23 61 63 38 78 82 42 45 | 45 26  5 91 71 40  4  1 94 47 14 55 10 95 81 44 25 24 78 20  3 43 61 50 66
+Card  96: 70 85 30 35 56 69 83 47 18 33 |  6 93 99 79 52  5 69 48 57 85  4 11  9 22 43 53 87 21 33 56 39 31 83 32 67
+Card  97: 52 27  4 63 32 54 89 45 19 40 | 86 50  2 75 72 79 23 85 12 60 34 76 15 55 17 68 90 78 14 95 41 26 33 38 24
+Card  98: 89 50 13 23 47 26 27 90 92 24 | 45 74 96 24 40 46 23 17 76 15 53 25 29 27 92 58 20 12 37 35 72 10 32 47 26
+Card  99: 12 47 10 35 30  8 57 83 84 39 | 73 98 81 88 34 52 33  8 86 55 47 83 84 66 23 29 62 21 70  1 64 49 53 15 94
+Card 100: 45 99 97 10 17  5 44 54 96 88 | 95 91 34 50 61 15 81 20 99 14 69 33 48 75 16  9 29 98 41 80 53 77 89 56 72
+Card 101: 20 85 57 67 47 54 58 65 95 32 | 49 88 10 23 48 93 85 95 69 75 38 25 78 45 12 80 26 14 32 24  8 21 99 77  1
+Card 102: 52 32 10 58  7 99 74  1 59 50 | 29 97 91 78 53 11 96 25 79 43 77 72 60 66 81 55 69 93 50 48 98 54 39 87 10
+Card 103: 28 95 73 79 26  5 60 56 40 59 | 49 14 29 94 69 86 82 85  1 83 81 54  8 43 71 99 32 35 78  5 87 57 15 44 48
+Card 104: 68 70 17 29 85 16 48 21  2 34 | 14 45 36 72 99 94 62 37 74 84 97 75 31 35 83 19  1 15 91 57 61 40 79 77  5
+Card 105: 18 33 10 82 88  2 61 81 41 15 | 33 34 15  1 82 63 77  3 57 67 10 88 93 13 84 39 68  5 54 96 64 41  7 18  4
+Card 106: 67 56 16 10 80 60 62 61 64 51 | 51 10 21 64 71 80  9 98 67  4 60 45 16 85 92 27 56 91 61 43 62 68  1 77 35
+Card 107: 58 50 49 28 39 22  8 63 72  1 | 25 45  9  7 88 71 94  3 54 66 27 85 32  1  8 10 22 84 69 92 86 39 61 50 49
+Card 108: 41 38 72  4 70 66 61 87 42 83 | 69 99 89 43 50 15  5 29 68 28 86 37 66 38 27 19 95 41 62 82  2 87 33 20 42
+Card 109: 85 35 69 74 73 23 29 31 11 92 | 33 36 29 28 92 87 70 62  5 24 95 38 11 48 47 75 81 35 51 15 94 90 32 78 13
+Card 110: 86  6 55 64 15 23 66 51 77 67 | 51 44 89 73 22 29 58 17 77 48 18 53 75 91 57 60 30 63 96 93 33 79 68 86 12
+Card 111: 34 40 48 88 11  4  2 41 39 66 | 15 47 42 81  4 24 52 10 13 34 90  2 79 45 99 96 31 92 23 63 11 76 44 73 70
+Card 112: 34 74 86 79 37 30 31 51 41 13 | 75 21 14 78  1 93 60 96 56 77 65 29 34 58 22 90 79 59  8 19 42 46 33  2  4
+Card 113: 50 16 13 39 17 98 73 48 30 66 | 37 41 97 57  6 91 99 86 78  5 94 85 15 88  3 83 21 26 16 98 51 27 60 46 50
+Card 114: 36 74 72 70 13 27 42 21  8 65 | 39 27 16 94 75  5 87 66 51 68 72 67 85 19 21 91 65 10 56 86 84 40 83 36 43
+Card 115: 55 68 47 93 44 19 40 33 69 51 | 20 89 33 84 77 79 10 14 26 43 16 78 37 41 62 49 95  3 30 82  5 18 50 86 69
+Card 116: 40  7 60 18 17 94 24 12 79 59 | 91 22 74 80 35 10 20 97 25 78 24 95 18 70 26 33  8 41 71 32 77 15 72 86 61
+Card 117: 53  5 43 22 37 55 42 62 87 50 | 24 57 27 11 17 20 83 86 81 18 21 42 79 62 69 25 88 36 13 65 78 80 28 93  7
+Card 118: 49 76 39 26 97 89  9  2 79 40 | 77 99 93 86 89  3 24 47 52 13 19  6 44 25 73 71 70 34 46 28 97 61 92 35 20
+Card 119: 35 97 25 47 40 18 86 45 64 38 | 83 33 66 73 58 22 14 77 45 16 98 61 63 99  4 40 72 30 50 46 51 44 49 84 70
+Card 120: 86 99 32 14 39 90 15  6 89 76 | 56 18 35 31  5 83 68 42 47 36 33 81 69 43 46 20 97 53 94 60 23 71 26 24 52
+Card 121: 53 39 83  9  7 59 20 14 17 93 | 92 78 49 16 62  3 60 29 48 88 56 33 68 64 15 35 99 94 55 41 77 74 90 11 86
+Card 122: 39 62 24 68 36 29 38 15 96 76 | 79 99 71 75 70 43 20 21 41 82  7 17  9 57 85  8 33 30 80 26 93 63 12  5 54
+Card 123: 34 53 21 57 84 19 45 62 50  4 | 27 59 88 78 36  3 22 28 29 10 54  9 48 47 76 91 25 13 96  8 11 42 46 74 40
+Card 124: 51 30 87 45 39 11 33 94 22 65 | 11 30 18 39  2 33 90 87 37 72 51 81 67 45 78 48 14 94 56 27 65 22 20 10 76
+Card 125: 94 87 72 21 28  6 59 60 61 35 | 46 92 59  4 60 76 71  3 53 35  8 86 51 72 47 73 25 28 87 55 43 63 21 66 50
+Card 126: 77 83 56 19 75 12 58 54 64 90 | 18 53 50 77 44 57 74 64 61 65 62  5 91 85 26  1 66 71 41 68 92 69 27  9 93
+Card 127:  2 14 39 77 97 63 33 24 46 35 |  8 79 91 46 28 66 58 75 80 73 85 34  2 95 33 38 35 69 67 26 23 63 78 87 97
+Card 128: 23 78 35 17 80 32 90 34 30 63 | 42 80  4 32 37 27  8 23 40 65 17 41 43 90 34 81 35 63 83 46 30 78 72 55 82
+Card 129: 77 84 23 99 78 95 40  4 55 56 | 46 49 44 65 36 66 94 64 34 16 30 81 62 77 82 28 31 18 86 32 74 75 88 99 71
+Card 130: 50 93 25 12 24 66 38 29 46 76 | 99 27 29 84 66  7 47 34 93  4 60 24 25 46 12  9 33 86 38 69 76 48 81 85 21
+Card 131: 89 68 69 30 59 72 26 70 42 51 | 78 74 18 68 89 22 72 40 67 34 84 39 43 76 81 63 30 54 36 24 51 98  1 19 59
+Card 132: 70 73  4 37 15 86 65  7 77 85 | 79 21  5 55 81 99 25 27 94 33 40 34 20 29 68 93 98 16 90 54 71 13 78 60 74
+Card 133: 11 89 21 87 56  1 70 79 36 63 | 18 59 80 62 76 39 25 27 53 48 45 47 89  2 85 55 91 15 84 31 33 64 28 30  8
+Card 134: 69 96 77 54 67 24 46 22 81 42 | 79 73 45 14 97 39 61 74 95 58 82 43 89  2  4 36 21 78 37 51 65 47 53 99 20
+Card 135: 33 92  5 46 16 18 10 32 77 67 | 72 30 76  7 33 64 18 54  6 85 73  3 68 96 92 45 61 32 88 56 87 42 39 84 86
+Card 136: 27 53 79 82 18  4 75 63 11 39 | 66 55 93 24 58 83 33 92 61 68 26 72 80 49  8 36 22 43 63 20 84 69 21 97 88
+Card 137: 22 50 61  6 94 62 90 73 25 46 | 66 99 72 17 77 57  6 73 48 34  5 58 13 16  2 36 35 23 78 42 12 27 24 29 37
+Card 138: 18 19 59 57 23 68 61 78 91 65 |  2  4 83 10 20 85 51 73 30  1 31  9 80 27 24 92  3 42 71 67 84 54 82 45 76
+Card 139: 23 41 36 48 93 74 10 73  6 18 | 47 84 14 89 62 39 37 94 15 46 97 98 29 17 72 32 64 31 99 76 86 45 75 61  5
+Card 140: 99 71 15 31 61 53  4 62 69 77 | 58  8 86 44 59 47 91 38 30 25 42 82 11 19 49 75  9 83 20 90  1 94 12 22 52
+Card 141: 55 87 74 50 52  9 76 90 73 25 | 39 50 27 56 57 70 66 92 24 23 32 72 45 75 31 78 74 99  8 79  1 43  5  2 53
+Card 142: 28 66 34 64 49 48 91 73 81 41 | 54 78 66 59 32 43 41 85 15 64 68 56  4 46 90 67 63 45 24 16 53 74 52 75 81
+Card 143: 30 38 11 31 66 26 40 93 88 14 | 30 88 31 15 93 27 55 96 11 17 20 35 14 10 66 51 40 18 57 53 24  9 26 58 38
+Card 144: 70  6 21 59 69 99 30 43 60 58 | 60  1 11 69 70 59 66 79 58 73 54 30 33 55 21 89 14 43 99  4 52 82  6  2 96
+Card 145: 25 44 26 89 81  7 57 40 59  9 | 95 20 38 12 57 32 80 34 25 94 40 59  9 65 93 68 42 86 44 89 81  7 70 26 62
+Card 146: 90 61 87 20 26 51 33 19 64 10 |  1 84 80 86 22 50 73 69 78 70 12 34 65 54  5 83 44 98 82 57 31  3 37 59 79
+Card 147: 73 32 37 22 42 83 17 20 61 76 | 76 87 22 61 45 48 83 32 60  3 17  8 70 95 12  1 73 40 82 85 65 20 37 42 88
+Card 148: 16 40 86 29 68 67 22 42 96  9 | 34 83 95 91 40 11 74 99 25 16 15 76 52 12 75 43 92 59 17 98 88 36  4  5 28
+Card 149: 17 85 45 10 60 72 15 50 61 63 | 85 11 92 50 10  8 37 23 96 20 69 15 40 72 89 60 61 17 54 63 27 28 31 24 45
+Card 150: 64 87 43 20 97 83 69 61 95 56 | 29 76 26 52 65 84 62 11 49 92 90 77 47 46 42 50 33 37 98  2  5  9 71 22 85
+Card 151: 12 23 35 44 39 73  1 30 95 33 | 36 10 58 60 72  6 43 64 75  1 16 93 15 89 68 56 99 88 32 52 18 22 98 67 66
+Card 152: 69 85 51  1 46 21 31 19 44 49 | 45 92  8 10 80 94 32 33 88 28 16 86 23 93  6 96 25 81  3 52 64 90 76 95 59
+Card 153: 42 74 39 36 45 26 25  1 68 12 | 70 33 74 79 96  1  4 88 34 76 59 61 75 27 92 72 57 98 51 10 29 52 64 26 35
+Card 154: 85 95 68 79 28 93 46 65 38 14 | 52 18 50  9 79  2 88 43 85 31 83 74 21 38 87 73 56 63 71 15 59 72 13 64 46
+Card 155: 11 43 73 53 49 65 27 37 30 51 | 27 28 23 51 61 54 71 57 88  1 40 65 34 53 73 83 24 82 15 32 46 11 79 77 80
+Card 156: 64 26  5 45 59 81 23 43 27 44 | 11 16 77 37 62 98 10 21 71 35 28 13 74 65 89 78 45 61 96  7 12 53 51 52 44
+Card 157: 27 87 50 60 44 48 85  1 33  8 | 84 41  4 36  8 49 26 43 52 95 77  3 75 72 54 66 98 21 19 61 18 78 30 37  1
+Card 158: 31 88 37 91 12 56 65 79 95 17 | 64 32 43  1 45  8 99 94 39 16 77 18 84 70 24 51 27 93 59 25 41 73 78 34 44
+Card 159: 88 86 84 17 93 64  3 14 59 32 | 37 21 60 95 23 62 45 98 56 78 20 81 99 22 12 57  5 36 51 10 93 72 58  8 13
+Card 160: 49 37 23 63 73 64 16 70 19 32 | 75 74 21 77 37 56 30 76 66  1 51  9 97 95 38 40 29 69 67  6 47 50 45 71 87
+Card 161: 10 67 21 27 39 79 22 92 47 42 |  9 80 82 75 20  2 53 64 76 96 31 61 50 12 16 15 38 18 90 59 65 70 55 99  6
+Card 162: 89 99 28 87  4 43 30 48 46 82 | 46 51 59 81 14 40 82  5 85 48 97 28 11  7 87 64 58 38 92 30 89 99 27 36 34
+Card 163:  2 91 88 95 38 31 92  3 27 60 | 76 31 38 29 60 68 22 87 71 11 95 48 50 21 88 26 44 32  2 69 27 45 94 79 81
+Card 164: 87 91 47 40  2 71 95 99 49 74 | 34  8 65 49 45 43 51 81  9 13 80 38 33 88 82 74 28 60 91 48  1 55 42 95 56
+Card 165: 57 74 54 91 94 96 55 64 39 75 | 67  9 10 80 75 77 12 87 95 50 25 19 82 65 76 66 23 30 45 61 79 17 72 37  7
+Card 166: 16  4 73 97 28 19 17 10 57 43 | 73 97 24 57 43 58 72 10  2 34  9 63 70 64 68 28 44 16 99 61  4 78 46 83 19
+Card 167: 53 51 67 68 18 26 55 10 69  9 | 46 64 73 12 97 89 67 22 30 82 14 27 36  4 72 19 61 13 93 24 91 63 48 21 87
+Card 168: 69 32 33 90 72 88 55 80 15 27 | 10 80 14 55 64 39 97 82 24 96 74 46 73 68 65 87 43 59 16 53 84 38 79 11 47
+Card 169: 74 85 11 55 15 59 36  5 54 18 | 31 27 42 86 93 33 68 45 40 32 44 88 48 47 35 25  9 89 49 66 39  1 79 69  7
+Card 170:  9 49  3 88  4 31 13 64 38 41 | 71 38 32 13 91 61  3 48 88 63 17 19 59 75 98 36  6 49 50 44 20  2 45 67 53
+Card 171: 67 87 77 34 32 64 56 59 58 36 | 50 74 68 64 22 63 38 12 73 32 10 14 29 55 31 92 91  9 76 24 17 49 33 95  2
+Card 172:  4 80 72 36 37 99 64 16 22 31 |  8 78 95 47 18 36 55 59 23 86 70 54 60 98 13 25 80 75 74 48 16  7 81  5 11
+Card 173:  4 77 32 71 39 67 58 11 57 29 | 87 31 69 92 71 62 20 77 14 47 60 57 75 94 37 86 95 97 41 85 30 54 48 44 10
+Card 174: 21 12  8 71 74 77 31 82  1 16 |  4 89 75 19 91 51 10 71 88 78 30 80 47 96 28 65 99 35 13 48 73 29 53 49 42
+Card 175: 58 38 44 98 56 18 21 63 74  3 | 92 55 64 94 49 41 10 78  6 53 76 70 45 46 83 63 82 73 95 81 33 30 77 50 34
+Card 176: 94 39 50 86 44 81 88 55 54  9 | 16 60 84 75 52 81  4 10 37  6 56 14 22  8 90 41 45 70 12 23 89 31 28 80 87
+Card 177: 96 26 47 79 99  4 66 50 53 45 |  9 94 70 72 81 75 76 77 64 78 12 32 85 40 20 90 28  3 35 57 93 87 63 17 54
+Card 178: 33 65 93 44 97 37 12 41 83 24 |  2  1 46 10 55 82 58 57 52 64 81 76 74 99  5 89  9 14 42 27  6 19 66  3 15
+Card 179: 12 28 65 24  9 30 38 11 18 55 | 85 10 70 62 71 19 55 67 68 25 44 95 51 91 29 30 15 13 90 52 47 23 21 66 92
+Card 180: 65  7 39 97 64  3 50 27 46  4 | 12 59 88 91 43 61 36 18 58 85 26  5 23  1 62 56  8 49 66 72  9 67 90 52 95
+Card 181: 13 97 85 12 18 20 70  6 93 44 | 25 12 54 97 68 65 23 26 13  8 50 62 10 32 73 88 51 76 98 16 37  4 87 18 35
+Card 182: 65 35 63  2 34 77 15 89 16 54 | 36  2  6 62 81 58 34 99 54 48 57 15 52 16 30 65 83 53 38 10 41 77 63 35 21
+Card 183: 16 98 38  2 86 34 85 48 50 95 | 34 50  2 14 89  6 47 44 67 25 86 98 17 48 85 99 51 16 55 35 38 66 95 32 90
+Card 184:  4  1 48 73 89 69 47 81 94 59 | 20 18 50 30 87 17 99 76 74 61  9 84 40 46 51 97 65 98 56 53  3 77 11  8 34
+Card 185: 79 72 33 15 36 89 13 90 94 28 | 58 96 94 83 84 90 52 53 31  9 17 97  2 54 56 26 20 76 98 91  1 14 74 23 64
+Card 186: 36 34 86 79 32 64 15 94 72 35 | 12 94 19 11 35 78 59 91 86 47 55 36 53 21  9 45 77 18 17 72 10 79 49 34 74
+Card 187: 43 16 88 54 62 17 93 91 21 59 | 51  7 46 16 26  6 96 30 42  2 10 55 37 48 74 89 98 73 84 19  9 11 24 44 69
+Card 188: 50 59 97 84 11 57  7 94 29 92 | 19 79 94 25 18 55 24 89 65 11 53 93 83 92 27 85 48  4 68 97 46 64 40  1 74
+Card 189: 17 19 78 66 96 13 84 16 59 53 | 15 30 24 55 62 12 51 87 35 73 33  8  2 94 49 52 58 75 32 34 69 16 74 89 46
+Card 190: 61 96  6 49 37  3 26 12 99 11 | 87 95 57 43 23 53 36 25 84 69 38 67 46 92 74 16 18 27 80 19 13 54 12 39 61
+Card 191: 85 69  8 21 84 42 68 22 55 45 | 10 51 26  7 27  9 18 76 46 57 20 59 77 38 92 49 90 52 98 78 34 37 74 91 12
+Card 192: 58 46 36 50 72 87 96 63 83  5 | 69 11 88 81 52 97 43 42 26 41 47 54 78 67 51 95 18 62 13 99 30  3 34 89 53
+Card 193: 20 78 41  3 26  1 29 63  4 88 | 64 59 80 93 66 18 62 94 23 25 79 53 52 31 44 46 67 75 24  8 97 10 51 99 84
+Card 194: 40  5 28 23 65 78 63 94 60 83 | 45 54  2 74 75 11 55  8 68 41 30 51 47 33 88 58 37 36 64  1 21 72 77 25 99
\ No newline at end of file
Index: src/main/resources/aoc-2023/problem5/input.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/aoc-2023/problem5/input.txt b/src/main/resources/aoc-2023/problem5/input.txt
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/resources/aoc-2023/problem5/input.txt	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,190 @@
+seeds: 1636419363 608824189 3409451394 227471750 12950548 91466703 1003260108 224873703 440703838 191248477 634347552 275264505 3673953799 67839674 2442763622 237071609 3766524590 426344831 1433781343 153722422
+
+seed-to-soil map:
+2067746708 2321931404 124423068
+2774831547 3357841131 95865403
+3776553292 3323317283 34523848
+4167907733 3453706534 116376261
+1190847573 767701596 554806188
+2870696950 1975607604 173919437
+1980384731 2612856575 87361977
+3380570559 2987564153 335753130
+3044616387 2451131599 21188806
+3909556885 2167390152 154541252
+3811077140 2149527041 17863111
+4077167815 3804196813 90739918
+2528751611 4222771775 72195521
+4064098137 3894936731 13069678
+4284283994 2700218552 10683302
+2468832075 2472320405 59919536
+3716323689 3570082795 60229603
+1085396685 662250708 105450888
+1030174777 1322507784 22912174
+1975607604 2446354472 4777127
+3828940251 2532239941 80616634
+584992388 1930412346 7315040
+592307428 0 437867349
+1745653761 437867349 224383359
+0 1345419958 584992388
+2192169776 2710901854 276662299
+2600947132 3630312398 173884415
+1053086951 1937727386 32309734
+3065805193 3908006409 314765366
+
+soil-to-fertilizer map:
+4148533839 3658735071 146433457
+656556737 471425735 68165409
+751630557 539591144 462446129
+724722146 1002037273 26908411
+0 24799538 226917727
+4049709448 3143711443 98824391
+412048729 251717265 219708470
+3321838617 2645077606 72145759
+3869354568 2464722726 180354880
+2044900648 1380852911 42721698
+226917727 1028945684 185131002
+3111204505 2717223365 210634112
+2129227343 1423574609 981977162
+1380852911 2927857477 215853966
+3393984376 2405551771 59170955
+3453155331 3242535834 416199237
+1596706877 3805168528 448193771
+2087622346 4253362299 41604997
+631757199 0 24799538
+
+fertilizer-to-water map:
+2679101382 2898500255 208361454
+3672966601 3700867560 107718031
+1764241275 4242224976 41519499
+1018987051 346629037 49456831
+518817716 396085868 3722249
+1224466235 306138732 40490305
+1068679130 947256497 122607155
+1328820253 625833852 156797976
+222363356 782631828 128136603
+4106081288 2497628211 144953761
+2887462836 1577782207 70654427
+2453719866 2077230479 225381516
+2177283137 3415053348 9638645
+1485618229 910768431 36488066
+1805760774 2833622399 32168430
+482104460 0 36713256
+4065926174 2480721173 16907038
+118194361 213050410 93088322
+1869091498 3106861709 308191639
+1068443882 399808117 235248
+2958117263 3926610020 315614956
+1577782207 2324396806 156324367
+1270677460 36713256 58142793
+1264956540 586932982 5720920
+1847306687 2302611995 21784811
+843178107 411124038 175808944
+1191286285 592653902 33179950
+4251035049 4283744475 11222821
+4262257870 2865790829 32709426
+4082833212 2810374323 23248076
+3273732219 2642581972 167792351
+350499959 1069863652 131604501
+3780684632 1859496740 217733739
+3441524570 3808585591 118024429
+3998418371 1791988937 67507803
+1837929204 3691490077 9377483
+1734106574 1761854236 30134701
+211282683 400043365 11080673
+2186921782 3424691993 266798084
+522539965 1201468153 320638142
+3559548999 1648436634 113417602
+0 94856049 118194361
+
+water-to-light map:
+487890089 1253174910 48217379
+1162866447 2295971038 331509140
+3115016077 4085918002 209049294
+3600618057 2743705059 694349239
+3021490874 3712826169 26810261
+2743705059 3739636430 3013944
+3048301135 4019203060 66714942
+1494375587 0 650888870
+167398115 650888870 320491974
+78943404 2207516327 88454711
+3324065371 3742650374 276552686
+881072381 1174877356 78297554
+2690077973 2191170718 16345609
+2746719003 3438054298 274771871
+2145264457 1301392289 544813516
+959369935 971380844 203496512
+536107468 1846205805 344964913
+0 2627480178 78943404
+
+light-to-temperature map:
+2934276762 3692860946 134937994
+2222730788 3468116804 32924074
+2030910720 3501040878 191820068
+2876227610 3450265581 17851223
+2821863146 1926340324 54364464
+2894078833 3827798940 40197929
+0 2499885250 950380331
+3069214756 1312743837 613596487
+950380331 232213448 1080530389
+2302682684 2382183979 117701271
+3682811243 47027822 185185626
+2255654862 0 47027822
+2420383955 1980704788 401479191
+
+temperature-to-humidity map:
+3474899002 2152529659 335631613
+1227362297 2657517973 1047434675
+1147289328 4214894327 80072969
+3069802422 3704952648 405096580
+4233143053 2090705416 61824243
+3979887316 1837449679 253255737
+3810530615 2488161272 169356701
+1042444229 4110049228 104845099
+2274796972 1042444229 718141444
+2992938416 1760585673 76864006
+
+humidity-to-location map:
+2905941546 1669212802 106379169
+3490393041 2571512629 24111360
+3327134512 896350741 163258529
+163044169 321738120 136537257
+1794114599 1475899779 31051829
+1155727752 771777629 98456450
+3514504401 1890601528 199093442
+3241757362 1290456090 8146812
+3713597843 2595623989 446677438
+2865335819 1388663285 15697510
+3155553665 2166925308 86203697
+26879537 567441866 52236777
+421556320 59735378 198122323
+4160275281 1059609270 134692015
+1072793086 2488577963 82934666
+2006477848 3530988938 680918581
+1766297705 1528152733 5360386
+1405780686 3214887893 74444149
+3017788788 1533513119 135699683
+977736160 4211907519 83059777
+1771658091 2466121455 22456508
+2687396429 870234079 26116662
+79116314 547394430 20047436
+2773054926 1506951608 21201125
+1825166428 3289332042 181311420
+2713513091 1404360795 59541835
+3012320715 1213908249 5468073
+3249904174 2089694970 77230338
+2794256051 1219376322 71079768
+1601513875 2253129005 74723447
+3153488471 769712435 2065194
+299581426 41300579 18434799
+332437267 458275377 89119053
+1273791166 2327852452 131989520
+1676237322 1298602902 90060383
+318016225 26879537 14421042
+769712435 3470643462 60345476
+2881033329 3042301427 24908217
+1480224835 2459841972 6279483
+99163750 257857701 63880419
+1060795937 1463902630 11997149
+830057911 3067209644 147678249
+1254184202 1194301285 19606964
+1486504318 1775591971 115009557
\ No newline at end of file
Index: src/main/resources/aoc-2023/problem6/input.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/aoc-2023/problem6/input.txt b/src/main/resources/aoc-2023/problem6/input.txt
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/resources/aoc-2023/problem6/input.txt	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,2 @@
+Time:        61     67     75     71
+Distance:   430   1036   1307   1150
\ No newline at end of file
Index: src/main/resources/aoc-2023/problem7/input.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/aoc-2023/problem7/input.txt b/src/main/resources/aoc-2023/problem7/input.txt
new file mode 100644
--- /dev/null	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
+++ b/src/main/resources/aoc-2023/problem7/input.txt	(revision 977dd79b672d9b4671edaeaebc95902e432190d5)
@@ -0,0 +1,1000 @@
+676AA 840
+5J666 204
+J4563 922
+7373J 199
+64882 944
+TK9KK 457
+54JA5 787
+T8889 294
+96TTT 503
+88T88 662
+J333A 524
+K8T82 994
+23552 253
+2T8JJ 588
+26772 972
+J6Q6T 777
+36A2A 5
+KKKK3 509
+T2T2T 793
+9T49T 326
+66QAQ 442
+2TJ87 572
+QKJK4 824
+5A755 107
+3847K 556
+K7682 855
+AJAJ3 882
+44499 830
+4J4KK 110
+5AA5A 489
+J5578 497
+A3583 992
+9A58A 452
+Q2366 703
+AA22J 749
+5J522 534
+Q7JQ7 802
+7757Q 43
+27338 239
+TTT24 485
+6488K 495
+22QJQ 936
+9AAJQ 194
+222J9 959
+QJA4K 809
+2QQTQ 59
+9J22J 109
+44A33 714
+A5AAJ 600
+34QKK 924
+698JA 148
+82229 661
+22423 951
+AA495 516
+A6J99 483
+366A3 818
+5549T 863
+2A22A 397
+ATKQ5 746
+999K5 717
+KQ622 375
+4J448 722
+KK55A 707
+JJ224 622
+555J3 190
+7J74J 913
+33AA8 570
+22K23 522
+3J7A7 200
+53533 843
+2Q5JJ 362
+224QQ 638
+8AA98 17
+T99TT 916
+Q94QQ 856
+88Q68 606
+824T4 289
+8937Q 926
+959A6 1000
+274KA 407
+74Q6K 72
+93Q9K 828
+486Q4 21
+4KT94 702
+AAA22 884
+TT882 304
+AAAT7 112
+99399 138
+999KJ 317
+9KT7Q 346
+TK99Q 644
+39JQ7 247
+88585 615
+K83J8 981
+QQQQK 625
+66AKK 171
+244JT 538
+Q5394 12
+KJJJK 458
+88KK8 724
+65566 993
+JT89Q 45
+T88TT 740
+22299 618
+8J73J 426
+3JQJA 558
+TT66T 804
+Q6A74 654
+66844 369
+A5A6A 413
+96TK3 161
+33262 365
+KKA39 225
+J22T7 288
+AKA96 37
+A2KQ7 473
+92A83 871
+44555 642
+33533 797
+J2322 885
+3J769 743
+8Q866 812
+QKKQQ 898
+83Q94 946
+8T3QK 233
+J3Q3Q 823
+73J94 157
+AQJ5A 985
+JTTTT 469
+8AA2K 906
+J92T9 983
+2T4T4 803
+3677J 596
+4QAA3 505
+666Q6 817
+QQQAA 351
+878QQ 541
+6T622 178
+33838 368
+A2822 366
+TT6AA 811
+873AK 518
+KKKK8 964
+93833 682
+KQJQK 16
+AAAA3 242
+54J89 866
+92A9K 982
+4QQQ6 665
+QT979 185
+36666 331
+A4AAA 301
+3QJQ2 590
+K4298 460
+Q66QJ 356
+4888J 70
+K3K55 149
+47478 532
+QQQTT 11
+QQ2Q5 295
+8588J 719
+5A3JK 65
+54225 106
+J8QQK 324
+KKQQ8 124
+A2887 617
+AQ2A6 907
+2J72Q 711
+AAAJA 248
+JJA27 91
+92J8Q 837
+A8883 121
+66446 341
+888JQ 63
+55296 651
+332J8 555
+T82J6 496
+38538 241
+32322 917
+2T333 562
+Q589J 891
+35K55 419
+23Q2A 685
+Q3Q3Q 293
+A8739 723
+55599 114
+77733 424
+KKJJA 49
+64J36 581
+T3A5K 601
+35A2K 563
+3KK5K 453
+55A66 383
+62222 699
+AAJ23 209
+33343 394
+9JJ99 921
+A92TA 672
+TT4T4 955
+5T593 101
+KKJ55 763
+33383 833
+66566 22
+82272 645
+4AJ27 914
+63966 523
+6K246 312
+Q48J7 54
+K77TK 174
+J7578 510
+KA6AA 342
+9K898 798
+9AT97 175
+75555 493
+22522 713
+6A2KA 647
+Q73Q3 561
+A72A7 627
+87J43 491
+QQ3TQ 410
+766T7 938
+A666A 280
+8AAJA 998
+988J9 989
+T4TT6 147
+42A2Q 860
+K8J75 637
+9A9Q7 376
+AKKJA 911
+KA464 582
+JJ59T 353
+9AAAA 751
+22K56 781
+777K7 552
+9TJ88 111
+T46KK 551
+2963K 593
+53358 205
+A4T87 267
+77667 886
+23QA3 197
+Q8745 632
+9K888 29
+AA2J4 623
+JTATT 78
+24242 800
+9Q94Q 206
+8T989 939
+46556 321
+3A33A 140
+KT345 382
+99A97 98
+KJK4A 28
+TJ54J 732
+2J789 877
+22AJ2 847
+KK222 849
+55AA6 58
+3J333 115
+9KK37 126
+9666A 995
+6A833 821
+79J5T 487
+TT7J7 415
+56349 372
+T9723 229
+42JA4 734
+KKQ33 954
+AA444 721
+2K222 151
+44445 928
+A3894 244
+Q88T8 436
+88555 888
+46666 850
+8J222 492
+4QJQ4 193
+2J2J2 842
+44644 814
+T999T 650
+9A643 223
+TK9A9 484
+4J546 810
+3KKK7 62
+K4499 327
+56568 38
+2AJKQ 952
+4774A 657
+547JJ 806
+89949 571
+246Q7 8
+33AA6 116
+76T64 254
+88899 323
+66T86 736
+6KKK7 827
+77666 224
+K4T4T 792
+Q68QQ 839
+KTKT6 292
+TQK26 88
+63T9A 905
+2292A 434
+8QQQQ 39
+53872 363
+99JAK 704
+7J273 795
+QQQ77 23
+92492 774
+886TT 975
+683K2 35
+46857 759
+K2549 389
+468AA 526
+27A22 521
+J4J29 565
+85T34 836
+56542 359
+K48AK 835
+8987T 908
+46644 347
+495QK 678
+22Q84 373
+78775 60
+33929 881
+QQQQA 466
+55537 15
+223KK 261
+QQ363 949
+2TTTT 135
+AAA8A 468
+2A68J 227
+88883 319
+5QJ76 664
+5K357 635
+8K68K 3
+99499 567
+A6292 213
+6T9KT 421
+9K999 64
+T8675 344
+4Q44Q 46
+88488 990
+44A44 235
+A5929 861
+55J56 266
+A77AQ 336
+7757K 471
+QQQQJ 291
+K7J96 480
+33239 652
+J2AAA 263
+77477 929
+J6TJT 540
+5J5A5 290
+A5A7J 776
+28K96 260
+2255Q 958
+K3596 18
+2JAJT 900
+K5555 329
+57385 102
+3T528 130
+57775 461
+TTTT9 942
+3TQ35 160
+K8333 335
+JJKKK 53
+74477 865
+84K3K 187
+245J3 86
+5396T 310
+T9A37 963
+K2J2K 528
+89233 991
+7547J 499
+J9TKT 919
+KK8QK 196
+5575T 779
+58528 84
+85228 584
+JJTTT 367
+QQQTQ 853
+9J999 619
+58JT5 862
+2227T 609
+66K6K 683
+7Q58Q 411
+666J4 71
+6877Q 816
+A5555 400
+K779A 848
+7A66K 195
+K2TK2 602
+7QQ9T 962
+J38QK 659
+97789 603
+K887K 700
+AJAA4 557
+TQ428 449
+79JQ4 219
+QKKKK 527
+999TQ 81
+92992 667
+2T22T 4
+T58AA 566
+J9595 154
+58685 2
+82J85 478
+4J444 692
+K7877 24
+98899 74
+2333J 298
+9J327 950
+8K694 826
+2K9A5 639
+JT7J6 459
+K2A77 728
+6T7TT 385
+KKKKA 343
+K28J8 144
+6668A 883
+7Q7J4 927
+A3A6A 741
+9JT68 760
+66363 273
+4848J 320
+45454 339
+33663 752
+TJT5T 438
+666A6 504
+J5J55 851
+23222 808
+48443 834
+95K95 258
+8J2KK 656
+44844 40
+4TAJ5 744
+8947T 546
+222KQ 455
+TKK99 515
+6K55J 604
+A32J9 841
+K4444 99
+K59A4 349
+TA8AA 819
+24J72 429
+4939K 535
+KQ3K8 318
+2AKJ3 500
+KKATT 517
+JT752 454
+3A2A5 550
+46JTK 901
+KKKTK 202
+66662 511
+63665 681
+2AKQ3 640
+7J692 542
+4KK8K 393
+33AAT 904
+KK5KK 669
+TT333 218
+95Q6J 807
+44334 401
+8Q888 931
+AAAQA 620
+K6KK8 42
+5TJ88 433
+TTJT2 737
+986JQ 113
+75JA2 467
+833A9 357
+82Q4J 432
+AKTAK 965
+68886 694
+35A93 137
+33939 974
+K454K 980
+K9JKT 14
+QQ34Q 910
+4A6T5 896
+93953 646
+382J9 127
+32726 377
+75999 537
+9392Q 697
+A33AA 128
+6584Q 237
+A66AQ 894
+67777 720
+63333 674
+T74Q2 846
+T2222 756
+AJTQA 630
+48848 984
+55636 392
+3T8J4 948
+5Q55J 575
+6633Q 108
+52K63 441
+QTTTQ 337
+84688 48
+T7777 123
+666T6 738
+22227 381
+2522A 757
+55448 285
+37389 633
+JJJJJ 189
+79799 259
+82TTJ 747
+9T95T 477
+55587 610
+499J9 416
+TT5TT 612
+29A53 414
+5T5T5 36
+92279 435
+79T22 61
+QA666 398
+428K2 785
+8883J 13
+5577K 282
+TJ78T 332
+JA97J 238
+TJ52K 214
+QQ23Q 388
+Q8Q5Q 786
+Q69Q9 333
+TTJKT 531
+7JA62 680
+52KJJ 987
+77876 153
+J3KK8 966
+7Q7Q6 420
+T4TA6 228
+4T265 83
+33933 873
+83384 771
+68K6K 340
+33A9A 668
+T7J33 50
+3J76K 559
+AAKK3 673
+KJQQ6 322
+24A4A 539
+T45J4 969
+3K5A3 428
+AA6A6 687
+2K788 380
+7A975 971
+8JQQ8 895
+Q245J 574
+QJQQJ 281
+T8QTQ 405
+4244J 624
+QT5J9 350
+4JKK7 51
+JJ977 262
+A8282 360
+A958T 446
+64Q43 822
+K5K2K 348
+J4TT4 684
+27K98 150
+48KJ7 501
+9AA89 44
+J4T3T 265
+49878 472
+73798 864
+34335 69
+254K6 255
+J77JK 589
+4KTJQ 256
+287JJ 708
+54TQ7 230
+Q4KK4 727
+565Q6 758
+A7AAA 80
+Q3K94 276
+2J89K 897
+JKJK8 286
+28AK6 598
+432KA 903
+4888K 852
+J77QT 870
+56J56 636
+KKKJ2 180
+78877 134
+7JJJ7 257
+T8T8J 25
+6TTTT 979
+KKKJK 79
+4Q6JJ 370
+J3A37 361
+44434 27
+J8868 139
+AAK8K 172
+KQ8A8 440
+Q6696 641
+55525 796
+6JJJ6 595
+45JTQ 594
+3K25K 250
+AA343 671
+5533T 173
+674Q5 465
+26999 34
+9A9A9 677
+5QT55 119
+22229 20
+3JQQJ 947
+2626A 564
+K5K5K 163
+K7K7J 611
+79769 854
+K8KQ8 374
+5726K 437
+A66Q8 390
+956J9 569
+TT788 794
+52867 791
+22A6J 406
+97999 986
+K7748 100
+TQ953 82
+99A99 474
+2T223 136
+8666J 519
+33723 303
+TT3TT 243
+J3QQ4 125
+787JJ 26
+A2QAQ 626
+JJJJ6 371
+92JQQ 482
+36Q6T 167
+AAAA5 451
+3555T 597
+K3K33 513
+5228Q 252
+5T393 967
+T8T88 953
+QQ464 427
+56558 735
+25822 226
+546Q3 879
+555T5 66
+5JQ57 945
+8338K 768
+2J222 358
+QQ44Q 418
+3KJ98 536
+85644 355
+939AA 67
+A25A2 6
+9TTJ2 655
+8K666 973
+JT83K 391
+76J77 876
+QQT55 447
+2K25K 957
+52J22 545
+2AT94 354
+K22J2 1
+33935 152
+K6J3T 709
+K3J38 813
+9J9KK 498
+QTJ24 832
+J5454 634
+86KKJ 770
+4386K 338
+KKQKQ 762
+94T4T 578
+25552 328
+Q8835 742
+767Q7 631
+Q5K55 613
+64287 307
+22666 30
+44494 915
+KAAKA 867
+78Q77 520
+TK4TT 553
+7Q77J 417
+38Q4J 297
+666JK 456
+A8KAA 143
+A997A 912
+QQQ66 977
+3A37A 210
+T3T37 716
+5954J 412
+2Q22Q 384
+79J54 270
+QJA8Q 221
+43A8T 512
+62228 815
+6569A 203
+A6AAJ 878
+5J545 616
+75557 249
+9QTQQ 245
+52626 695
+A77J7 182
+78QJ8 543
+AJAJA 605
+74K82 729
+77J22 874
+34T5J 766
+88337 548
+9T794 423
+32662 887
+298TT 621
+694J8 95
+46995 166
+J333J 778
+2AA92 890
+23288 679
+67T94 755
+T7242 893
+KK7K7 789
+55455 838
+A899T 302
+9T555 220
+2A555 731
+QQTJ7 643
+99599 184
+K746A 399
+8798A 159
+TJ63T 395
+999T9 573
+K8KT8 857
+67666 753
+KKK44 675
+744KK 628
+232J4 155
+97777 706
+4T446 507
+7463T 933
+35862 629
+J9Q8K 334
+88348 345
+57T67 845
+999J6 868
+K4QQ7 968
+QQA9Q 997
+449QQ 892
+64K32 169
+855TT 689
+899J6 488
+KQ78J 296
+66858 754
+99Q38 653
+T253J 576
+75J27 162
+J8JJJ 494
+6KKKK 402
+6963T 31
+Q444A 686
+666J6 745
+7J777 544
+T8TA8 772
+9AQAQ 978
+Q8292 19
+33K33 750
+AJ399 156
+48AJK 476
+TQT33 179
+83A5K 131
+32J2T 92
+J2J28 663
+7QJ75 314
+J8T38 475
+6K3AT 7
+TTJ7J 932
+7T584 820
+Q5497 32
+T33TT 490
+J69J6 782
+A5576 999
+38A38 77
+63686 533
+38838 103
+88887 309
+77769 464
+57335 439
+9T8TK 909
+53J33 599
+8K49T 222
+22T28 701
+75756 207
+777JJ 216
+2TQJT 271
+557Q7 236
+K8TTK 47
+JK67J 275
+36524 181
+TAJ8T 718
+74397 448
+2JQ92 158
+3J838 765
+4582A 97
+QK933 956
+66222 93
+86JQ5 443
+7JJ42 502
+5T5A5 607
+4ATTT 299
+JJ8J8 305
+TTATA 996
+9KK9K 872
+3AJAA 725
+A4242 387
+97K57 408
+7K677 445
+99429 94
+393Q6 805
+J7K77 306
+JTAJ6 767
+Q6447 696
+972AT 710
+2QQQ2 90
+Q4Q4K 403
+3KJ3K 56
+55485 930
+7J577 462
+9ATA8 614
+T9J79 712
+59J64 170
+89TT3 10
+86866 586
+AJ924 118
+555J5 396
+36J36 211
+6TJJK 240
+4447K 730
+33AAJ 941
+AQ24A 829
+569Q2 943
+44K4K 234
+9Q263 773
+55T58 923
+J6J66 902
+3734J 141
+Q7Q4J 278
+QQ5QA 587
+TT9AT 579
+TKK3T 75
+89KK2 269
+QQQQ6 961
+332K6 698
+33J3Q 186
+K9875 268
+696A9 330
+TJA43 858
+9Q66Q 76
+2TJTJ 799
+28866 775
+J444J 880
+Q8K54 470
+3KQ84 33
+JJ443 177
+J6TTK 274
+AT66A 217
+98888 889
+99998 283
+TQ2KA 554
+622J9 379
+59T5T 188
+27722 287
+54778 769
+Q84AJ 783
+9TTT7 264
+4J42Q 690
+32JTT 165
+4QQQQ 918
+3QQJQ 325
+883A4 486
+3Q284 201
+AKAAA 251
+73JA5 164
+72626 705
+A7342 514
+42222 272
+7J32K 404
+JK4T3 117
+33373 215
+QA256 284
+T4T4A 899
+TTATT 825
+55KK2 934
+J929A 246
+QJ4K8 425
+5A837 279
+JJ888 431
+KQKJ6 386
+AJ8A8 89
+JJJA7 9
+388J4 970
+88J88 120
+78J69 133
+AT3T7 506
+K9929 960
+2QTJK 976
+28289 935
+84AJ4 940
+328J2 577
+7344J 525
+77997 715
+3J6J6 925
+949J6 277
+9TAT9 733
+235QA 920
+8J282 409
+825KJ 364
+7Q7Q7 212
+54772 315
+7AA7A 104
+6A985 547
+22228 129
+K5KJK 693
+252T8 726
+K3KK3 176
+33377 560
+3KK2J 132
+4J875 183
+92T47 68
+5Q376 748
+T46KT 313
+4JJ8J 801
+745Q7 585
+Q2K47 549
+43525 875
+AKK79 41
+T8858 580
+Q6976 688
+8A8AA 761
+2K6KK 168
+4848T 788
+53232 988
+T9389 869
+KJ34J 96
+77T44 859
+J8333 300
+J5J35 122
+923KK 57
+88828 352
+3864J 529
+4AQQK 608
+33QT3 378
+33759 530
+444Q4 937
+72454 450
+77A66 831
+2K22A 790
+485A5 52
+98T68 208
+78772 481
+QQ7QQ 73
+95A59 479
+93T52 780
+995KK 192
+96J66 670
+59995 105
+72575 764
+T3769 422
+86656 739
+55Q55 508
+J6569 658
+6QQT2 145
+A9T68 232
+JKK92 691
+TT82Q 463
+J4477 591
+K5AK3 648
+22552 676
+355QQ 142
+3T7A2 444
+TQTTT 316
+JJJJQ 844
+64729 666
+TKTKK 568
+K2975 198
+K8K99 430
+5855J 660
+J4A43 583
+2224T 85
+727Q2 146
+T4JTK 308
+4J3KQ 784
+QAJAQ 311
+45884 191
+484K8 649
+JAA66 592
+49848 87
+AATAT 231
+57QQ5 55
\ No newline at end of file
